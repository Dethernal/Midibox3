ARM GAS  /tmp/ccYXnoH2.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NVIC_ClearPendingIRQ,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	NVIC_ClearPendingIRQ:
  23              	.LFB52:
  24              		.file 1 "Drivers/CMSIS/Include/core_cm3.h"
   1:Drivers/CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:Drivers/CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm3.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm3.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm3.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm3.h **** 
   9:Drivers/CMSIS/Include/core_cm3.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm3.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm3.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm3.h ****    *
  21:Drivers/CMSIS/Include/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm3.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm3.h **** 
  34:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 2


  35:Drivers/CMSIS/Include/core_cm3.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm3.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm3.h **** #endif
  40:Drivers/CMSIS/Include/core_cm3.h **** 
  41:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm3.h **** 
  44:Drivers/CMSIS/Include/core_cm3.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm3.h **** 
  46:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm3.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm3.h **** #endif
  49:Drivers/CMSIS/Include/core_cm3.h **** 
  50:Drivers/CMSIS/Include/core_cm3.h **** /**
  51:Drivers/CMSIS/Include/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm3.h **** 
  54:Drivers/CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm3.h **** 
  57:Drivers/CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm3.h **** 
  60:Drivers/CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm3.h ****  */
  63:Drivers/CMSIS/Include/core_cm3.h **** 
  64:Drivers/CMSIS/Include/core_cm3.h **** 
  65:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm3.h **** /**
  69:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup Cortex_M3
  70:Drivers/CMSIS/Include/core_cm3.h ****   @{
  71:Drivers/CMSIS/Include/core_cm3.h ****  */
  72:Drivers/CMSIS/Include/core_cm3.h **** 
  73:Drivers/CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  74:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm3.h **** 
  79:Drivers/CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm3.h **** 
  81:Drivers/CMSIS/Include/core_cm3.h **** 
  82:Drivers/CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm3.h **** 
  87:Drivers/CMSIS/Include/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 3


  92:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm3.h **** 
  97:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm3.h **** 
 102:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm3.h **** 
 106:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm3.h **** 
 111:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm3.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm3.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm3.h **** 
 117:Drivers/CMSIS/Include/core_cm3.h **** #else
 118:Drivers/CMSIS/Include/core_cm3.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm3.h **** #endif
 120:Drivers/CMSIS/Include/core_cm3.h **** 
 121:Drivers/CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm3.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm3.h **** */
 124:Drivers/CMSIS/Include/core_cm3.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm3.h **** 
 126:Drivers/CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm3.h **** 
 131:Drivers/CMSIS/Include/core_cm3.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm3.h **** 
 136:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm3.h **** 
 141:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm3.h **** 
 146:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  /tmp/ccYXnoH2.s 			page 4


 149:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm3.h **** 
 151:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm3.h **** 
 156:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm3.h **** 
 161:Drivers/CMSIS/Include/core_cm3.h **** #endif
 162:Drivers/CMSIS/Include/core_cm3.h **** 
 163:Drivers/CMSIS/Include/core_cm3.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm3.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm3.h **** 
 166:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm3.h **** }
 168:Drivers/CMSIS/Include/core_cm3.h **** #endif
 169:Drivers/CMSIS/Include/core_cm3.h **** 
 170:Drivers/CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm3.h **** 
 172:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm3.h **** 
 174:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm3.h **** 
 177:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm3.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm3.h **** #endif
 180:Drivers/CMSIS/Include/core_cm3.h **** 
 181:Drivers/CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 184:Drivers/CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200U
 185:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm3.h **** 
 188:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 189:Drivers/CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0U
 190:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm3.h **** 
 193:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 194:Drivers/CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4U
 195:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm3.h **** 
 198:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 199:Drivers/CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 200:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 201:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 202:Drivers/CMSIS/Include/core_cm3.h **** #endif
 203:Drivers/CMSIS/Include/core_cm3.h **** 
 204:Drivers/CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 205:Drivers/CMSIS/Include/core_cm3.h **** /**
ARM GAS  /tmp/ccYXnoH2.s 			page 5


 206:Drivers/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 207:Drivers/CMSIS/Include/core_cm3.h **** 
 208:Drivers/CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 209:Drivers/CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 210:Drivers/CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 211:Drivers/CMSIS/Include/core_cm3.h **** */
 212:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 213:Drivers/CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 214:Drivers/CMSIS/Include/core_cm3.h **** #else
 215:Drivers/CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 216:Drivers/CMSIS/Include/core_cm3.h **** #endif
 217:Drivers/CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 218:Drivers/CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 219:Drivers/CMSIS/Include/core_cm3.h **** 
 220:Drivers/CMSIS/Include/core_cm3.h **** /* following defines should be used for structure members */
 221:Drivers/CMSIS/Include/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 222:Drivers/CMSIS/Include/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 223:Drivers/CMSIS/Include/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 224:Drivers/CMSIS/Include/core_cm3.h **** 
 225:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 226:Drivers/CMSIS/Include/core_cm3.h **** 
 227:Drivers/CMSIS/Include/core_cm3.h **** 
 228:Drivers/CMSIS/Include/core_cm3.h **** 
 229:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
 230:Drivers/CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 231:Drivers/CMSIS/Include/core_cm3.h ****   Core Register contain:
 232:Drivers/CMSIS/Include/core_cm3.h ****   - Core Register
 233:Drivers/CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 234:Drivers/CMSIS/Include/core_cm3.h ****   - Core SCB Register
 235:Drivers/CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 236:Drivers/CMSIS/Include/core_cm3.h ****   - Core Debug Register
 237:Drivers/CMSIS/Include/core_cm3.h ****   - Core MPU Register
 238:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 239:Drivers/CMSIS/Include/core_cm3.h **** /**
 240:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 241:Drivers/CMSIS/Include/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 242:Drivers/CMSIS/Include/core_cm3.h **** */
 243:Drivers/CMSIS/Include/core_cm3.h **** 
 244:Drivers/CMSIS/Include/core_cm3.h **** /**
 245:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 246:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 247:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Core Register type definitions.
 248:Drivers/CMSIS/Include/core_cm3.h ****   @{
 249:Drivers/CMSIS/Include/core_cm3.h ****  */
 250:Drivers/CMSIS/Include/core_cm3.h **** 
 251:Drivers/CMSIS/Include/core_cm3.h **** /**
 252:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 253:Drivers/CMSIS/Include/core_cm3.h ****  */
 254:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 255:Drivers/CMSIS/Include/core_cm3.h **** {
 256:Drivers/CMSIS/Include/core_cm3.h ****   struct
 257:Drivers/CMSIS/Include/core_cm3.h ****   {
 258:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 259:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 260:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 261:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 262:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
ARM GAS  /tmp/ccYXnoH2.s 			page 6


 263:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 264:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 265:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 266:Drivers/CMSIS/Include/core_cm3.h **** } APSR_Type;
 267:Drivers/CMSIS/Include/core_cm3.h **** 
 268:Drivers/CMSIS/Include/core_cm3.h **** /* APSR Register Definitions */
 269:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 270:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm3.h **** 
 272:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 273:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 274:Drivers/CMSIS/Include/core_cm3.h **** 
 275:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 276:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 277:Drivers/CMSIS/Include/core_cm3.h **** 
 278:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 279:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 280:Drivers/CMSIS/Include/core_cm3.h **** 
 281:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 282:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 283:Drivers/CMSIS/Include/core_cm3.h **** 
 284:Drivers/CMSIS/Include/core_cm3.h **** 
 285:Drivers/CMSIS/Include/core_cm3.h **** /**
 286:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 287:Drivers/CMSIS/Include/core_cm3.h ****  */
 288:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 289:Drivers/CMSIS/Include/core_cm3.h **** {
 290:Drivers/CMSIS/Include/core_cm3.h ****   struct
 291:Drivers/CMSIS/Include/core_cm3.h ****   {
 292:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 293:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 294:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 295:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 296:Drivers/CMSIS/Include/core_cm3.h **** } IPSR_Type;
 297:Drivers/CMSIS/Include/core_cm3.h **** 
 298:Drivers/CMSIS/Include/core_cm3.h **** /* IPSR Register Definitions */
 299:Drivers/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 300:Drivers/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 301:Drivers/CMSIS/Include/core_cm3.h **** 
 302:Drivers/CMSIS/Include/core_cm3.h **** 
 303:Drivers/CMSIS/Include/core_cm3.h **** /**
 304:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 305:Drivers/CMSIS/Include/core_cm3.h ****  */
 306:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 307:Drivers/CMSIS/Include/core_cm3.h **** {
 308:Drivers/CMSIS/Include/core_cm3.h ****   struct
 309:Drivers/CMSIS/Include/core_cm3.h ****   {
 310:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 311:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 312:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 313:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 314:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 315:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 316:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 317:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 318:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 319:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /tmp/ccYXnoH2.s 			page 7


 320:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 321:Drivers/CMSIS/Include/core_cm3.h **** } xPSR_Type;
 322:Drivers/CMSIS/Include/core_cm3.h **** 
 323:Drivers/CMSIS/Include/core_cm3.h **** /* xPSR Register Definitions */
 324:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm3.h **** 
 327:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm3.h **** 
 330:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 331:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 332:Drivers/CMSIS/Include/core_cm3.h **** 
 333:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 334:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 335:Drivers/CMSIS/Include/core_cm3.h **** 
 336:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 337:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 338:Drivers/CMSIS/Include/core_cm3.h **** 
 339:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 340:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 341:Drivers/CMSIS/Include/core_cm3.h **** 
 342:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 343:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 344:Drivers/CMSIS/Include/core_cm3.h **** 
 345:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 346:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 347:Drivers/CMSIS/Include/core_cm3.h **** 
 348:Drivers/CMSIS/Include/core_cm3.h **** 
 349:Drivers/CMSIS/Include/core_cm3.h **** /**
 350:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 351:Drivers/CMSIS/Include/core_cm3.h ****  */
 352:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 353:Drivers/CMSIS/Include/core_cm3.h **** {
 354:Drivers/CMSIS/Include/core_cm3.h ****   struct
 355:Drivers/CMSIS/Include/core_cm3.h ****   {
 356:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 357:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 358:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 359:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 360:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 361:Drivers/CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 362:Drivers/CMSIS/Include/core_cm3.h **** 
 363:Drivers/CMSIS/Include/core_cm3.h **** /* CONTROL Register Definitions */
 364:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 365:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 366:Drivers/CMSIS/Include/core_cm3.h **** 
 367:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 368:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 369:Drivers/CMSIS/Include/core_cm3.h **** 
 370:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 371:Drivers/CMSIS/Include/core_cm3.h **** 
 372:Drivers/CMSIS/Include/core_cm3.h **** 
 373:Drivers/CMSIS/Include/core_cm3.h **** /**
 374:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 375:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 376:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
ARM GAS  /tmp/ccYXnoH2.s 			page 8


 377:Drivers/CMSIS/Include/core_cm3.h ****   @{
 378:Drivers/CMSIS/Include/core_cm3.h ****  */
 379:Drivers/CMSIS/Include/core_cm3.h **** 
 380:Drivers/CMSIS/Include/core_cm3.h **** /**
 381:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 382:Drivers/CMSIS/Include/core_cm3.h ****  */
 383:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 384:Drivers/CMSIS/Include/core_cm3.h **** {
 385:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 386:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[24U];
 387:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 388:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RSERVED1[24U];
 389:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 390:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[24U];
 391:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 392:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[24U];
 393:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 394:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[56U];
 395:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 396:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[644U];
 397:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 398:Drivers/CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 399:Drivers/CMSIS/Include/core_cm3.h **** 
 400:Drivers/CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 401:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 402:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 403:Drivers/CMSIS/Include/core_cm3.h **** 
 404:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 405:Drivers/CMSIS/Include/core_cm3.h **** 
 406:Drivers/CMSIS/Include/core_cm3.h **** 
 407:Drivers/CMSIS/Include/core_cm3.h **** /**
 408:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 409:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 410:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 411:Drivers/CMSIS/Include/core_cm3.h ****   @{
 412:Drivers/CMSIS/Include/core_cm3.h ****  */
 413:Drivers/CMSIS/Include/core_cm3.h **** 
 414:Drivers/CMSIS/Include/core_cm3.h **** /**
 415:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 416:Drivers/CMSIS/Include/core_cm3.h ****  */
 417:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 418:Drivers/CMSIS/Include/core_cm3.h **** {
 419:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 420:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 421:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 422:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 423:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 424:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 425:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 426:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 427:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 428:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 429:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 430:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 431:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 432:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 433:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
ARM GAS  /tmp/ccYXnoH2.s 			page 9


 434:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 435:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 436:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 437:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 438:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[5U];
 439:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 440:Drivers/CMSIS/Include/core_cm3.h **** } SCB_Type;
 441:Drivers/CMSIS/Include/core_cm3.h **** 
 442:Drivers/CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 443:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm3.h **** 
 446:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm3.h **** 
 449:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm3.h **** 
 452:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm3.h **** 
 455:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 456:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm3.h **** 
 458:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 459:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm3.h **** 
 462:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 463:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm3.h **** 
 465:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 466:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm3.h **** 
 468:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 469:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm3.h **** 
 471:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 472:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 473:Drivers/CMSIS/Include/core_cm3.h **** 
 474:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 476:Drivers/CMSIS/Include/core_cm3.h **** 
 477:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 479:Drivers/CMSIS/Include/core_cm3.h **** 
 480:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm3.h **** 
 483:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 484:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 485:Drivers/CMSIS/Include/core_cm3.h **** 
 486:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 487:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 488:Drivers/CMSIS/Include/core_cm3.h **** 
 489:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 490:Drivers/CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201U)                   /* core r2p1 */
ARM GAS  /tmp/ccYXnoH2.s 			page 10


 491:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 492:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 493:Drivers/CMSIS/Include/core_cm3.h **** 
 494:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 495:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 496:Drivers/CMSIS/Include/core_cm3.h **** #else
 497:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 498:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 499:Drivers/CMSIS/Include/core_cm3.h **** #endif
 500:Drivers/CMSIS/Include/core_cm3.h **** 
 501:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 502:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 503:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 504:Drivers/CMSIS/Include/core_cm3.h **** 
 505:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 506:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 507:Drivers/CMSIS/Include/core_cm3.h **** 
 508:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 509:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 510:Drivers/CMSIS/Include/core_cm3.h **** 
 511:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 512:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 513:Drivers/CMSIS/Include/core_cm3.h **** 
 514:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 515:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 516:Drivers/CMSIS/Include/core_cm3.h **** 
 517:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 518:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 519:Drivers/CMSIS/Include/core_cm3.h **** 
 520:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 521:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 522:Drivers/CMSIS/Include/core_cm3.h **** 
 523:Drivers/CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 524:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 525:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 526:Drivers/CMSIS/Include/core_cm3.h **** 
 527:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 528:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 529:Drivers/CMSIS/Include/core_cm3.h **** 
 530:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 531:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 532:Drivers/CMSIS/Include/core_cm3.h **** 
 533:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 534:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 535:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 536:Drivers/CMSIS/Include/core_cm3.h **** 
 537:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 538:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 539:Drivers/CMSIS/Include/core_cm3.h **** 
 540:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 541:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 542:Drivers/CMSIS/Include/core_cm3.h **** 
 543:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 544:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 545:Drivers/CMSIS/Include/core_cm3.h **** 
 546:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 547:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
ARM GAS  /tmp/ccYXnoH2.s 			page 11


 548:Drivers/CMSIS/Include/core_cm3.h **** 
 549:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 550:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 551:Drivers/CMSIS/Include/core_cm3.h **** 
 552:Drivers/CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 553:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 554:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 555:Drivers/CMSIS/Include/core_cm3.h **** 
 556:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 557:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 558:Drivers/CMSIS/Include/core_cm3.h **** 
 559:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 560:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 561:Drivers/CMSIS/Include/core_cm3.h **** 
 562:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 563:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 564:Drivers/CMSIS/Include/core_cm3.h **** 
 565:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 566:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 567:Drivers/CMSIS/Include/core_cm3.h **** 
 568:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 569:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 570:Drivers/CMSIS/Include/core_cm3.h **** 
 571:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 572:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 573:Drivers/CMSIS/Include/core_cm3.h **** 
 574:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 575:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 576:Drivers/CMSIS/Include/core_cm3.h **** 
 577:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 578:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 579:Drivers/CMSIS/Include/core_cm3.h **** 
 580:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 581:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 582:Drivers/CMSIS/Include/core_cm3.h **** 
 583:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 584:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 585:Drivers/CMSIS/Include/core_cm3.h **** 
 586:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 587:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 588:Drivers/CMSIS/Include/core_cm3.h **** 
 589:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 590:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 591:Drivers/CMSIS/Include/core_cm3.h **** 
 592:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 593:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 594:Drivers/CMSIS/Include/core_cm3.h **** 
 595:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 596:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 597:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 598:Drivers/CMSIS/Include/core_cm3.h **** 
 599:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 600:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 601:Drivers/CMSIS/Include/core_cm3.h **** 
 602:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 603:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 604:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 12


 605:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 606:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 607:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 608:Drivers/CMSIS/Include/core_cm3.h **** 
 609:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 610:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 611:Drivers/CMSIS/Include/core_cm3.h **** 
 612:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 613:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 614:Drivers/CMSIS/Include/core_cm3.h **** 
 615:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 616:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 617:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 618:Drivers/CMSIS/Include/core_cm3.h **** 
 619:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 620:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 621:Drivers/CMSIS/Include/core_cm3.h **** 
 622:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 623:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 624:Drivers/CMSIS/Include/core_cm3.h **** 
 625:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 626:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 627:Drivers/CMSIS/Include/core_cm3.h **** 
 628:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 629:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 630:Drivers/CMSIS/Include/core_cm3.h **** 
 631:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 632:Drivers/CMSIS/Include/core_cm3.h **** 
 633:Drivers/CMSIS/Include/core_cm3.h **** 
 634:Drivers/CMSIS/Include/core_cm3.h **** /**
 635:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 636:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 637:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 638:Drivers/CMSIS/Include/core_cm3.h ****   @{
 639:Drivers/CMSIS/Include/core_cm3.h ****  */
 640:Drivers/CMSIS/Include/core_cm3.h **** 
 641:Drivers/CMSIS/Include/core_cm3.h **** /**
 642:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 643:Drivers/CMSIS/Include/core_cm3.h ****  */
 644:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 645:Drivers/CMSIS/Include/core_cm3.h **** {
 646:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 647:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 648:Drivers/CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200U))
 649:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 650:Drivers/CMSIS/Include/core_cm3.h **** #else
 651:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 652:Drivers/CMSIS/Include/core_cm3.h **** #endif
 653:Drivers/CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 654:Drivers/CMSIS/Include/core_cm3.h **** 
 655:Drivers/CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 656:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 657:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 658:Drivers/CMSIS/Include/core_cm3.h **** 
 659:Drivers/CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 660:Drivers/CMSIS/Include/core_cm3.h **** 
 661:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
ARM GAS  /tmp/ccYXnoH2.s 			page 13


 662:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 663:Drivers/CMSIS/Include/core_cm3.h **** 
 664:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 665:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 666:Drivers/CMSIS/Include/core_cm3.h **** 
 667:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 668:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 669:Drivers/CMSIS/Include/core_cm3.h **** 
 670:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 671:Drivers/CMSIS/Include/core_cm3.h **** 
 672:Drivers/CMSIS/Include/core_cm3.h **** 
 673:Drivers/CMSIS/Include/core_cm3.h **** /**
 674:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 675:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 676:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 677:Drivers/CMSIS/Include/core_cm3.h ****   @{
 678:Drivers/CMSIS/Include/core_cm3.h ****  */
 679:Drivers/CMSIS/Include/core_cm3.h **** 
 680:Drivers/CMSIS/Include/core_cm3.h **** /**
 681:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 682:Drivers/CMSIS/Include/core_cm3.h ****  */
 683:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 684:Drivers/CMSIS/Include/core_cm3.h **** {
 685:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 686:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 687:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 688:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 689:Drivers/CMSIS/Include/core_cm3.h **** } SysTick_Type;
 690:Drivers/CMSIS/Include/core_cm3.h **** 
 691:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 692:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 693:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 694:Drivers/CMSIS/Include/core_cm3.h **** 
 695:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 696:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 697:Drivers/CMSIS/Include/core_cm3.h **** 
 698:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 699:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 700:Drivers/CMSIS/Include/core_cm3.h **** 
 701:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 702:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 703:Drivers/CMSIS/Include/core_cm3.h **** 
 704:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 705:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 706:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 707:Drivers/CMSIS/Include/core_cm3.h **** 
 708:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 709:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 710:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 711:Drivers/CMSIS/Include/core_cm3.h **** 
 712:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 713:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 714:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 715:Drivers/CMSIS/Include/core_cm3.h **** 
 716:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 717:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 718:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 14


 719:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 720:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 721:Drivers/CMSIS/Include/core_cm3.h **** 
 722:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 723:Drivers/CMSIS/Include/core_cm3.h **** 
 724:Drivers/CMSIS/Include/core_cm3.h **** 
 725:Drivers/CMSIS/Include/core_cm3.h **** /**
 726:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 727:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 728:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 729:Drivers/CMSIS/Include/core_cm3.h ****   @{
 730:Drivers/CMSIS/Include/core_cm3.h ****  */
 731:Drivers/CMSIS/Include/core_cm3.h **** 
 732:Drivers/CMSIS/Include/core_cm3.h **** /**
 733:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 734:Drivers/CMSIS/Include/core_cm3.h ****  */
 735:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 736:Drivers/CMSIS/Include/core_cm3.h **** {
 737:Drivers/CMSIS/Include/core_cm3.h ****   __OM  union
 738:Drivers/CMSIS/Include/core_cm3.h ****   {
 739:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 740:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 741:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 742:Drivers/CMSIS/Include/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 743:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[864U];
 744:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 745:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[15U];
 746:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 747:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[15U];
 748:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 749:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[29U];
 750:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 751:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 752:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 753:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[43U];
 754:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 755:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 756:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[6U];
 757:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 758:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 759:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 760:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 761:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 762:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 763:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 764:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 765:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 766:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 767:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 768:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 769:Drivers/CMSIS/Include/core_cm3.h **** } ITM_Type;
 770:Drivers/CMSIS/Include/core_cm3.h **** 
 771:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 772:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 773:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 774:Drivers/CMSIS/Include/core_cm3.h **** 
 775:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
ARM GAS  /tmp/ccYXnoH2.s 			page 15


 776:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 777:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 778:Drivers/CMSIS/Include/core_cm3.h **** 
 779:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 780:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 781:Drivers/CMSIS/Include/core_cm3.h **** 
 782:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 783:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 784:Drivers/CMSIS/Include/core_cm3.h **** 
 785:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 786:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 787:Drivers/CMSIS/Include/core_cm3.h **** 
 788:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 789:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 790:Drivers/CMSIS/Include/core_cm3.h **** 
 791:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 792:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 793:Drivers/CMSIS/Include/core_cm3.h **** 
 794:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 795:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 796:Drivers/CMSIS/Include/core_cm3.h **** 
 797:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 798:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 799:Drivers/CMSIS/Include/core_cm3.h **** 
 800:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 801:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 802:Drivers/CMSIS/Include/core_cm3.h **** 
 803:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 804:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 805:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 806:Drivers/CMSIS/Include/core_cm3.h **** 
 807:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 808:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 809:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 810:Drivers/CMSIS/Include/core_cm3.h **** 
 811:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 812:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 813:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 814:Drivers/CMSIS/Include/core_cm3.h **** 
 815:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 816:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 817:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 818:Drivers/CMSIS/Include/core_cm3.h **** 
 819:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 820:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 821:Drivers/CMSIS/Include/core_cm3.h **** 
 822:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 823:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 824:Drivers/CMSIS/Include/core_cm3.h **** 
 825:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 826:Drivers/CMSIS/Include/core_cm3.h **** 
 827:Drivers/CMSIS/Include/core_cm3.h **** 
 828:Drivers/CMSIS/Include/core_cm3.h **** /**
 829:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 830:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 831:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 832:Drivers/CMSIS/Include/core_cm3.h ****   @{
ARM GAS  /tmp/ccYXnoH2.s 			page 16


 833:Drivers/CMSIS/Include/core_cm3.h ****  */
 834:Drivers/CMSIS/Include/core_cm3.h **** 
 835:Drivers/CMSIS/Include/core_cm3.h **** /**
 836:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 837:Drivers/CMSIS/Include/core_cm3.h ****  */
 838:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 839:Drivers/CMSIS/Include/core_cm3.h **** {
 840:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 841:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 842:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 843:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 844:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 845:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 846:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 847:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 848:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 849:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 850:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 851:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 852:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 853:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 854:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 855:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 856:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 857:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 858:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 859:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[1U];
 860:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 861:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 862:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 863:Drivers/CMSIS/Include/core_cm3.h **** } DWT_Type;
 864:Drivers/CMSIS/Include/core_cm3.h **** 
 865:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 866:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 867:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 868:Drivers/CMSIS/Include/core_cm3.h **** 
 869:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 870:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 871:Drivers/CMSIS/Include/core_cm3.h **** 
 872:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 873:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 874:Drivers/CMSIS/Include/core_cm3.h **** 
 875:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 876:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 877:Drivers/CMSIS/Include/core_cm3.h **** 
 878:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 879:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 880:Drivers/CMSIS/Include/core_cm3.h **** 
 881:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 882:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 883:Drivers/CMSIS/Include/core_cm3.h **** 
 884:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 885:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 886:Drivers/CMSIS/Include/core_cm3.h **** 
 887:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 888:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 889:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 17


 890:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 891:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 892:Drivers/CMSIS/Include/core_cm3.h **** 
 893:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 894:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 895:Drivers/CMSIS/Include/core_cm3.h **** 
 896:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 897:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 898:Drivers/CMSIS/Include/core_cm3.h **** 
 899:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 900:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 901:Drivers/CMSIS/Include/core_cm3.h **** 
 902:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 903:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 904:Drivers/CMSIS/Include/core_cm3.h **** 
 905:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 906:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 907:Drivers/CMSIS/Include/core_cm3.h **** 
 908:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 909:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 910:Drivers/CMSIS/Include/core_cm3.h **** 
 911:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 912:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 913:Drivers/CMSIS/Include/core_cm3.h **** 
 914:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 915:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 916:Drivers/CMSIS/Include/core_cm3.h **** 
 917:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 918:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 919:Drivers/CMSIS/Include/core_cm3.h **** 
 920:Drivers/CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 921:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 922:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 923:Drivers/CMSIS/Include/core_cm3.h **** 
 924:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 925:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 926:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 927:Drivers/CMSIS/Include/core_cm3.h **** 
 928:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 929:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 930:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 931:Drivers/CMSIS/Include/core_cm3.h **** 
 932:Drivers/CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 933:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 934:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 935:Drivers/CMSIS/Include/core_cm3.h **** 
 936:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 937:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 938:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 939:Drivers/CMSIS/Include/core_cm3.h **** 
 940:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 941:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 942:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 943:Drivers/CMSIS/Include/core_cm3.h **** 
 944:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 945:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 946:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
ARM GAS  /tmp/ccYXnoH2.s 			page 18


 947:Drivers/CMSIS/Include/core_cm3.h **** 
 948:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 949:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 950:Drivers/CMSIS/Include/core_cm3.h **** 
 951:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 952:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 953:Drivers/CMSIS/Include/core_cm3.h **** 
 954:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 955:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 956:Drivers/CMSIS/Include/core_cm3.h **** 
 957:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 958:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 959:Drivers/CMSIS/Include/core_cm3.h **** 
 960:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 961:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 962:Drivers/CMSIS/Include/core_cm3.h **** 
 963:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 964:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 965:Drivers/CMSIS/Include/core_cm3.h **** 
 966:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 967:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 968:Drivers/CMSIS/Include/core_cm3.h **** 
 969:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 970:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 971:Drivers/CMSIS/Include/core_cm3.h **** 
 972:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 973:Drivers/CMSIS/Include/core_cm3.h **** 
 974:Drivers/CMSIS/Include/core_cm3.h **** 
 975:Drivers/CMSIS/Include/core_cm3.h **** /**
 976:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 977:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 978:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 979:Drivers/CMSIS/Include/core_cm3.h ****   @{
 980:Drivers/CMSIS/Include/core_cm3.h ****  */
 981:Drivers/CMSIS/Include/core_cm3.h **** 
 982:Drivers/CMSIS/Include/core_cm3.h **** /**
 983:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 984:Drivers/CMSIS/Include/core_cm3.h ****  */
 985:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 986:Drivers/CMSIS/Include/core_cm3.h **** {
 987:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 988:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 989:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[2U];
 990:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 991:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[55U];
 992:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 993:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[131U];
 994:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 995:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 996:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 997:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[759U];
 998:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 999:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1000:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1001:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[1U];
1002:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1003:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
ARM GAS  /tmp/ccYXnoH2.s 			page 19


1004:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1005:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[39U];
1006:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1007:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1008:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED7[8U];
1009:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1010:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1011:Drivers/CMSIS/Include/core_cm3.h **** } TPI_Type;
1012:Drivers/CMSIS/Include/core_cm3.h **** 
1013:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1014:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1015:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1016:Drivers/CMSIS/Include/core_cm3.h **** 
1017:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1018:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1019:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1020:Drivers/CMSIS/Include/core_cm3.h **** 
1021:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1022:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1023:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1024:Drivers/CMSIS/Include/core_cm3.h **** 
1025:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1026:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1027:Drivers/CMSIS/Include/core_cm3.h **** 
1028:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1029:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1030:Drivers/CMSIS/Include/core_cm3.h **** 
1031:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1032:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1033:Drivers/CMSIS/Include/core_cm3.h **** 
1034:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1035:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1036:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1037:Drivers/CMSIS/Include/core_cm3.h **** 
1038:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1039:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1040:Drivers/CMSIS/Include/core_cm3.h **** 
1041:Drivers/CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1042:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1043:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1044:Drivers/CMSIS/Include/core_cm3.h **** 
1045:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1046:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1047:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1048:Drivers/CMSIS/Include/core_cm3.h **** 
1049:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1050:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1051:Drivers/CMSIS/Include/core_cm3.h **** 
1052:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1053:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1054:Drivers/CMSIS/Include/core_cm3.h **** 
1055:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1056:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1057:Drivers/CMSIS/Include/core_cm3.h **** 
1058:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1059:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1060:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 20


1061:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1062:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1063:Drivers/CMSIS/Include/core_cm3.h **** 
1064:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1065:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1066:Drivers/CMSIS/Include/core_cm3.h **** 
1067:Drivers/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1068:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1069:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1070:Drivers/CMSIS/Include/core_cm3.h **** 
1071:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1072:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1073:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1074:Drivers/CMSIS/Include/core_cm3.h **** 
1075:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1076:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1077:Drivers/CMSIS/Include/core_cm3.h **** 
1078:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1079:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1080:Drivers/CMSIS/Include/core_cm3.h **** 
1081:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1082:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1083:Drivers/CMSIS/Include/core_cm3.h **** 
1084:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1085:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1086:Drivers/CMSIS/Include/core_cm3.h **** 
1087:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1088:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1089:Drivers/CMSIS/Include/core_cm3.h **** 
1090:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1091:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1092:Drivers/CMSIS/Include/core_cm3.h **** 
1093:Drivers/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1094:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1095:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1096:Drivers/CMSIS/Include/core_cm3.h **** 
1097:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1098:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1099:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1100:Drivers/CMSIS/Include/core_cm3.h **** 
1101:Drivers/CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1102:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1103:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1104:Drivers/CMSIS/Include/core_cm3.h **** 
1105:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1106:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1107:Drivers/CMSIS/Include/core_cm3.h **** 
1108:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1109:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1110:Drivers/CMSIS/Include/core_cm3.h **** 
1111:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1112:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1113:Drivers/CMSIS/Include/core_cm3.h **** 
1114:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1115:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1116:Drivers/CMSIS/Include/core_cm3.h **** 
1117:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
ARM GAS  /tmp/ccYXnoH2.s 			page 21


1118:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1119:Drivers/CMSIS/Include/core_cm3.h **** 
1120:Drivers/CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1121:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1122:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1123:Drivers/CMSIS/Include/core_cm3.h **** 
1124:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1125:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1126:Drivers/CMSIS/Include/core_cm3.h **** 
1127:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1128:Drivers/CMSIS/Include/core_cm3.h **** 
1129:Drivers/CMSIS/Include/core_cm3.h **** 
1130:Drivers/CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1U)
1131:Drivers/CMSIS/Include/core_cm3.h **** /**
1132:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1133:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1134:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1135:Drivers/CMSIS/Include/core_cm3.h ****   @{
1136:Drivers/CMSIS/Include/core_cm3.h ****  */
1137:Drivers/CMSIS/Include/core_cm3.h **** 
1138:Drivers/CMSIS/Include/core_cm3.h **** /**
1139:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1140:Drivers/CMSIS/Include/core_cm3.h ****  */
1141:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
1142:Drivers/CMSIS/Include/core_cm3.h **** {
1143:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1144:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1145:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1146:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1147:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1148:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1149:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1150:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1151:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1152:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1153:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1154:Drivers/CMSIS/Include/core_cm3.h **** } MPU_Type;
1155:Drivers/CMSIS/Include/core_cm3.h **** 
1156:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Type Register Definitions */
1157:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1158:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1159:Drivers/CMSIS/Include/core_cm3.h **** 
1160:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1161:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1162:Drivers/CMSIS/Include/core_cm3.h **** 
1163:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1164:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1165:Drivers/CMSIS/Include/core_cm3.h **** 
1166:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Control Register Definitions */
1167:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1168:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1169:Drivers/CMSIS/Include/core_cm3.h **** 
1170:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1171:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1172:Drivers/CMSIS/Include/core_cm3.h **** 
1173:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1174:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
ARM GAS  /tmp/ccYXnoH2.s 			page 22


1175:Drivers/CMSIS/Include/core_cm3.h **** 
1176:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Number Register Definitions */
1177:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1178:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1179:Drivers/CMSIS/Include/core_cm3.h **** 
1180:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1181:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1182:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1183:Drivers/CMSIS/Include/core_cm3.h **** 
1184:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1185:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1186:Drivers/CMSIS/Include/core_cm3.h **** 
1187:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1188:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1189:Drivers/CMSIS/Include/core_cm3.h **** 
1190:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1191:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1192:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1193:Drivers/CMSIS/Include/core_cm3.h **** 
1194:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1195:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1196:Drivers/CMSIS/Include/core_cm3.h **** 
1197:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1198:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1199:Drivers/CMSIS/Include/core_cm3.h **** 
1200:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1201:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1202:Drivers/CMSIS/Include/core_cm3.h **** 
1203:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1204:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1205:Drivers/CMSIS/Include/core_cm3.h **** 
1206:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1207:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1208:Drivers/CMSIS/Include/core_cm3.h **** 
1209:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1210:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1211:Drivers/CMSIS/Include/core_cm3.h **** 
1212:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1213:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1214:Drivers/CMSIS/Include/core_cm3.h **** 
1215:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1216:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1217:Drivers/CMSIS/Include/core_cm3.h **** 
1218:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1219:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1220:Drivers/CMSIS/Include/core_cm3.h **** 
1221:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1222:Drivers/CMSIS/Include/core_cm3.h **** #endif
1223:Drivers/CMSIS/Include/core_cm3.h **** 
1224:Drivers/CMSIS/Include/core_cm3.h **** 
1225:Drivers/CMSIS/Include/core_cm3.h **** /**
1226:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1227:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1228:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1229:Drivers/CMSIS/Include/core_cm3.h ****   @{
1230:Drivers/CMSIS/Include/core_cm3.h ****  */
1231:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 23


1232:Drivers/CMSIS/Include/core_cm3.h **** /**
1233:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1234:Drivers/CMSIS/Include/core_cm3.h ****  */
1235:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
1236:Drivers/CMSIS/Include/core_cm3.h **** {
1237:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1238:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1239:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1240:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1241:Drivers/CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1242:Drivers/CMSIS/Include/core_cm3.h **** 
1243:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1244:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1245:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1246:Drivers/CMSIS/Include/core_cm3.h **** 
1247:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1248:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1249:Drivers/CMSIS/Include/core_cm3.h **** 
1250:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1251:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1252:Drivers/CMSIS/Include/core_cm3.h **** 
1253:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1254:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1255:Drivers/CMSIS/Include/core_cm3.h **** 
1256:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1257:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1258:Drivers/CMSIS/Include/core_cm3.h **** 
1259:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1260:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1261:Drivers/CMSIS/Include/core_cm3.h **** 
1262:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1263:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1264:Drivers/CMSIS/Include/core_cm3.h **** 
1265:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1266:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1267:Drivers/CMSIS/Include/core_cm3.h **** 
1268:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1269:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1270:Drivers/CMSIS/Include/core_cm3.h **** 
1271:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1272:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1273:Drivers/CMSIS/Include/core_cm3.h **** 
1274:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1275:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1276:Drivers/CMSIS/Include/core_cm3.h **** 
1277:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1278:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1279:Drivers/CMSIS/Include/core_cm3.h **** 
1280:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1281:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1282:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1283:Drivers/CMSIS/Include/core_cm3.h **** 
1284:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1285:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1286:Drivers/CMSIS/Include/core_cm3.h **** 
1287:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1288:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
ARM GAS  /tmp/ccYXnoH2.s 			page 24


1289:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1290:Drivers/CMSIS/Include/core_cm3.h **** 
1291:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1292:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1293:Drivers/CMSIS/Include/core_cm3.h **** 
1294:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1295:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1296:Drivers/CMSIS/Include/core_cm3.h **** 
1297:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1298:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1299:Drivers/CMSIS/Include/core_cm3.h **** 
1300:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1301:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1302:Drivers/CMSIS/Include/core_cm3.h **** 
1303:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1304:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1305:Drivers/CMSIS/Include/core_cm3.h **** 
1306:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1307:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1308:Drivers/CMSIS/Include/core_cm3.h **** 
1309:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1310:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1311:Drivers/CMSIS/Include/core_cm3.h **** 
1312:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1313:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1314:Drivers/CMSIS/Include/core_cm3.h **** 
1315:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1316:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1317:Drivers/CMSIS/Include/core_cm3.h **** 
1318:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1319:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1320:Drivers/CMSIS/Include/core_cm3.h **** 
1321:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1322:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1323:Drivers/CMSIS/Include/core_cm3.h **** 
1324:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1325:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1326:Drivers/CMSIS/Include/core_cm3.h **** 
1327:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1328:Drivers/CMSIS/Include/core_cm3.h **** 
1329:Drivers/CMSIS/Include/core_cm3.h **** 
1330:Drivers/CMSIS/Include/core_cm3.h **** /**
1331:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1332:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1333:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1334:Drivers/CMSIS/Include/core_cm3.h ****   @{
1335:Drivers/CMSIS/Include/core_cm3.h ****  */
1336:Drivers/CMSIS/Include/core_cm3.h **** 
1337:Drivers/CMSIS/Include/core_cm3.h **** /**
1338:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1339:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1340:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of the bit field.
1341:Drivers/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted value.
1342:Drivers/CMSIS/Include/core_cm3.h **** */
1343:Drivers/CMSIS/Include/core_cm3.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1344:Drivers/CMSIS/Include/core_cm3.h **** 
1345:Drivers/CMSIS/Include/core_cm3.h **** /**
ARM GAS  /tmp/ccYXnoH2.s 			page 25


1346:Drivers/CMSIS/Include/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1347:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1348:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of register.
1349:Drivers/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted bit field value.
1350:Drivers/CMSIS/Include/core_cm3.h **** */
1351:Drivers/CMSIS/Include/core_cm3.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1352:Drivers/CMSIS/Include/core_cm3.h **** 
1353:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1354:Drivers/CMSIS/Include/core_cm3.h **** 
1355:Drivers/CMSIS/Include/core_cm3.h **** 
1356:Drivers/CMSIS/Include/core_cm3.h **** /**
1357:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1358:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1359:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1360:Drivers/CMSIS/Include/core_cm3.h ****   @{
1361:Drivers/CMSIS/Include/core_cm3.h ****  */
1362:Drivers/CMSIS/Include/core_cm3.h **** 
1363:Drivers/CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1364:Drivers/CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1365:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1366:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1367:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1368:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1369:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1370:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1371:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1372:Drivers/CMSIS/Include/core_cm3.h **** 
1373:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1374:Drivers/CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1375:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1376:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1377:Drivers/CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1378:Drivers/CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1379:Drivers/CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1380:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1381:Drivers/CMSIS/Include/core_cm3.h **** 
1382:Drivers/CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1U)
1383:Drivers/CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1384:Drivers/CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1385:Drivers/CMSIS/Include/core_cm3.h **** #endif
1386:Drivers/CMSIS/Include/core_cm3.h **** 
1387:Drivers/CMSIS/Include/core_cm3.h **** /*@} */
1388:Drivers/CMSIS/Include/core_cm3.h **** 
1389:Drivers/CMSIS/Include/core_cm3.h **** 
1390:Drivers/CMSIS/Include/core_cm3.h **** 
1391:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
1392:Drivers/CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1393:Drivers/CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1394:Drivers/CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1395:Drivers/CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1396:Drivers/CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1397:Drivers/CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1398:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1399:Drivers/CMSIS/Include/core_cm3.h **** /**
1400:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1401:Drivers/CMSIS/Include/core_cm3.h **** */
1402:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 26


1403:Drivers/CMSIS/Include/core_cm3.h **** 
1404:Drivers/CMSIS/Include/core_cm3.h **** 
1405:Drivers/CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1406:Drivers/CMSIS/Include/core_cm3.h **** /**
1407:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1408:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1409:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1410:Drivers/CMSIS/Include/core_cm3.h ****   @{
1411:Drivers/CMSIS/Include/core_cm3.h ****  */
1412:Drivers/CMSIS/Include/core_cm3.h **** 
1413:Drivers/CMSIS/Include/core_cm3.h **** /**
1414:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Priority Grouping
1415:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1416:Drivers/CMSIS/Include/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1417:Drivers/CMSIS/Include/core_cm3.h ****            Only values from 0..7 are used.
1418:Drivers/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1419:Drivers/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1420:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1421:Drivers/CMSIS/Include/core_cm3.h ****  */
1422:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1423:Drivers/CMSIS/Include/core_cm3.h **** {
1424:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1425:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1426:Drivers/CMSIS/Include/core_cm3.h **** 
1427:Drivers/CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1428:Drivers/CMSIS/Include/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1429:Drivers/CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                   |
1430:Drivers/CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1431:Drivers/CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1432:Drivers/CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1433:Drivers/CMSIS/Include/core_cm3.h **** }
1434:Drivers/CMSIS/Include/core_cm3.h **** 
1435:Drivers/CMSIS/Include/core_cm3.h **** 
1436:Drivers/CMSIS/Include/core_cm3.h **** /**
1437:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Priority Grouping
1438:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1439:Drivers/CMSIS/Include/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1440:Drivers/CMSIS/Include/core_cm3.h ****  */
1441:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1442:Drivers/CMSIS/Include/core_cm3.h **** {
1443:Drivers/CMSIS/Include/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1444:Drivers/CMSIS/Include/core_cm3.h **** }
1445:Drivers/CMSIS/Include/core_cm3.h **** 
1446:Drivers/CMSIS/Include/core_cm3.h **** 
1447:Drivers/CMSIS/Include/core_cm3.h **** /**
1448:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Enable External Interrupt
1449:Drivers/CMSIS/Include/core_cm3.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1450:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1451:Drivers/CMSIS/Include/core_cm3.h ****  */
1452:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1453:Drivers/CMSIS/Include/core_cm3.h **** {
1454:Drivers/CMSIS/Include/core_cm3.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1455:Drivers/CMSIS/Include/core_cm3.h **** }
1456:Drivers/CMSIS/Include/core_cm3.h **** 
1457:Drivers/CMSIS/Include/core_cm3.h **** 
1458:Drivers/CMSIS/Include/core_cm3.h **** /**
1459:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Disable External Interrupt
ARM GAS  /tmp/ccYXnoH2.s 			page 27


1460:Drivers/CMSIS/Include/core_cm3.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1461:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1462:Drivers/CMSIS/Include/core_cm3.h ****  */
1463:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1464:Drivers/CMSIS/Include/core_cm3.h **** {
1465:Drivers/CMSIS/Include/core_cm3.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1466:Drivers/CMSIS/Include/core_cm3.h **** }
1467:Drivers/CMSIS/Include/core_cm3.h **** 
1468:Drivers/CMSIS/Include/core_cm3.h **** 
1469:Drivers/CMSIS/Include/core_cm3.h **** /**
1470:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Pending Interrupt
1471:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1472:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1473:Drivers/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not pending.
1474:Drivers/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is pending.
1475:Drivers/CMSIS/Include/core_cm3.h ****  */
1476:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1477:Drivers/CMSIS/Include/core_cm3.h **** {
1478:Drivers/CMSIS/Include/core_cm3.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1479:Drivers/CMSIS/Include/core_cm3.h **** }
1480:Drivers/CMSIS/Include/core_cm3.h **** 
1481:Drivers/CMSIS/Include/core_cm3.h **** 
1482:Drivers/CMSIS/Include/core_cm3.h **** /**
1483:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Pending Interrupt
1484:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the pending bit of an external interrupt.
1485:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1486:Drivers/CMSIS/Include/core_cm3.h ****  */
1487:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1488:Drivers/CMSIS/Include/core_cm3.h **** {
1489:Drivers/CMSIS/Include/core_cm3.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1490:Drivers/CMSIS/Include/core_cm3.h **** }
1491:Drivers/CMSIS/Include/core_cm3.h **** 
1492:Drivers/CMSIS/Include/core_cm3.h **** 
1493:Drivers/CMSIS/Include/core_cm3.h **** /**
1494:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Clear Pending Interrupt
1495:Drivers/CMSIS/Include/core_cm3.h ****   \details Clears the pending bit of an external interrupt.
1496:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1497:Drivers/CMSIS/Include/core_cm3.h ****  */
1498:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1499:Drivers/CMSIS/Include/core_cm3.h **** {
  25              		.loc 1 1499 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 80B4     		push	{r7}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 0346     		mov	r3, r0
  41 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  /tmp/ccYXnoH2.s 			page 28


1500:Drivers/CMSIS/Include/core_cm3.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
  42              		.loc 1 1500 0
  43 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  44 000c 03F01F02 		and	r2, r3, #31
  45 0010 0749     		ldr	r1, .L2
  46 0012 97F90730 		ldrsb	r3, [r7, #7]
  47 0016 5B09     		lsrs	r3, r3, #5
  48 0018 0120     		movs	r0, #1
  49 001a 00FA02F2 		lsl	r2, r0, r2
  50 001e 6033     		adds	r3, r3, #96
  51 0020 41F82320 		str	r2, [r1, r3, lsl #2]
1501:Drivers/CMSIS/Include/core_cm3.h **** }
  52              		.loc 1 1501 0
  53 0024 00BF     		nop
  54 0026 0C37     		adds	r7, r7, #12
  55              	.LCFI3:
  56              		.cfi_def_cfa_offset 4
  57 0028 BD46     		mov	sp, r7
  58              	.LCFI4:
  59              		.cfi_def_cfa_register 13
  60              		@ sp needed
  61 002a 80BC     		pop	{r7}
  62              	.LCFI5:
  63              		.cfi_restore 7
  64              		.cfi_def_cfa_offset 0
  65 002c 7047     		bx	lr
  66              	.L3:
  67 002e 00BF     		.align	2
  68              	.L2:
  69 0030 00E100E0 		.word	-536813312
  70              		.cfi_endproc
  71              	.LFE52:
  73              		.section	.rodata.CHANNEL_OFFSET_TAB,"a",%progbits
  74              		.align	2
  77              	CHANNEL_OFFSET_TAB:
  78 0000 08       		.byte	8
  79 0001 1C       		.byte	28
  80 0002 30       		.byte	48
  81 0003 44       		.byte	68
  82 0004 58       		.byte	88
  83 0005 6C       		.byte	108
  84 0006 80       		.byte	-128
  85              		.section	.rodata.OFFSET_TAB_CCMRx,"a",%progbits
  86              		.align	2
  89              	OFFSET_TAB_CCMRx:
  90 0000 00       		.byte	0
  91 0001 00       		.byte	0
  92 0002 00       		.byte	0
  93 0003 00       		.byte	0
  94 0004 04       		.byte	4
  95 0005 04       		.byte	4
  96 0006 04       		.byte	4
  97              		.section	.rodata.SHIFT_TAB_OCxx,"a",%progbits
  98              		.align	2
 101              	SHIFT_TAB_OCxx:
 102 0000 00       		.byte	0
 103 0001 00       		.byte	0
ARM GAS  /tmp/ccYXnoH2.s 			page 29


 104 0002 08       		.byte	8
 105 0003 00       		.byte	0
 106 0004 00       		.byte	0
 107 0005 00       		.byte	0
 108 0006 08       		.byte	8
 109              		.section	.rodata.SHIFT_TAB_ICxx,"a",%progbits
 110              		.align	2
 113              	SHIFT_TAB_ICxx:
 114 0000 00       		.byte	0
 115 0001 00       		.byte	0
 116 0002 08       		.byte	8
 117 0003 00       		.byte	0
 118 0004 00       		.byte	0
 119 0005 00       		.byte	0
 120 0006 08       		.byte	8
 121              		.section	.rodata.SHIFT_TAB_CCxP,"a",%progbits
 122              		.align	2
 125              	SHIFT_TAB_CCxP:
 126 0000 00       		.byte	0
 127 0001 02       		.byte	2
 128 0002 04       		.byte	4
 129 0003 06       		.byte	6
 130 0004 08       		.byte	8
 131 0005 0A       		.byte	10
 132 0006 0C       		.byte	12
 133              		.section	.rodata.SHIFT_TAB_OISx,"a",%progbits
 134              		.align	2
 137              	SHIFT_TAB_OISx:
 138 0000 00       		.byte	0
 139 0001 01       		.byte	1
 140 0002 02       		.byte	2
 141 0003 03       		.byte	3
 142 0004 04       		.byte	4
 143 0005 05       		.byte	5
 144 0006 06       		.byte	6
 145              		.section	.text.LL_USART_IsActiveFlag_RXNE,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 152              	LL_USART_IsActiveFlag_RXNE:
 153              	.LFB585:
 154              		.file 2 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h"
   1:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @file    stm32f1xx_ll_usart.h
   4:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @attention
   8:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *
   9:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  10:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *
  11:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *   1. Redistributions of source code must retain the above copyright notice,
ARM GAS  /tmp/ccYXnoH2.s 			page 30


  14:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *      without specific prior written permission.
  21:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *
  22:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *
  33:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   ******************************************************************************
  34:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  35:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  36:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #ifndef __STM32F1xx_LL_USART_H
  38:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __STM32F1xx_LL_USART_H
  39:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  40:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #ifdef __cplusplus
  41:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** extern "C" {
  42:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif
  43:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  44:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #include "stm32f1xx.h"
  46:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  47:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @addtogroup STM32F1xx_LL_Driver
  48:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
  49:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  50:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  51:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (UART4) || defined (UART5)
  52:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  53:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL USART
  54:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
  55:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  56:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  57:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  60:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  61:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  62:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
  63:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  64:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  65:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Defines used for the bit position in the register and perform offsets*/
  66:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define USART_POSITION_GTPR_GT                  USART_GTPR_GT_Pos
  67:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
  68:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
  69:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  70:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 31


  71:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  72:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  73:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  74:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
  75:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  76:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
  77:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
  78:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  79:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  80:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  81:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  82:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  83:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  84:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
  85:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  86:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  87:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
  88:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  89:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
  90:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** typedef struct
  91:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
  92:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  93:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  94:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  95:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  96:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  97:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  98:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
  99:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined(USART_CR1_OVER8)
 122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif /* USART_OverSampling_Feature */
ARM GAS  /tmp/ccYXnoH2.s 			page 32


 128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** } LL_USART_InitTypeDef;
 129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** typedef struct
 134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_PE                          USART_SR_PE                   /*!< Parity error fla
 178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_FE                          USART_SR_FE                   /*!< Framing error fl
 179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_NE                          USART_SR_NE                   /*!< Noise detected f
 180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_ORE                         USART_SR_ORE                  /*!< Overrun error fl
 181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_IDLE                        USART_SR_IDLE                 /*!< Idle line detect
 182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_RXNE                        USART_SR_RXNE                 /*!< Read data regist
 183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_TC                          USART_SR_TC                   /*!< Transmission com
 184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_TXE                         USART_SR_TXE                  /*!< Transmit data re
ARM GAS  /tmp/ccYXnoH2.s 			page 33


 185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_LBD                         USART_SR_LBD                  /*!< LIN break detect
 186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_SR_CTS                         USART_SR_CTS                  /*!< CTS flag */
 187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */ 
 221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
ARM GAS  /tmp/ccYXnoH2.s 			page 34


 242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined(USART_CR1_OVER8)
 247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif /* USART_OverSampling_Feature */
 257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
ARM GAS  /tmp/ccYXnoH2.s 			page 35


 299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Write a value in USART register
 351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __REG__ Register to be written
 353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
ARM GAS  /tmp/ccYXnoH2.s 			page 36


 356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Read a value in USART register
 360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __REG__ Register to be read
 362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Register value
 363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8_100(__PERIPHCLK__, __BAUDRATE__)      (((__PERIPHCLK__)*25)/(2*(__
 381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (__LL_USART_DIV_SAMPLING8_10
 382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (((__LL_USART_DIV_SAMPLING8_
 383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* UART BRR = mantissa + overflow + fraction
 384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****             = (UART DIVMANT << 4) + ((UART DIVFRAQ & 0xF8) << 1) + (UART DIVFRAQ & 0x07) */
 385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)             (((__LL_USART_DIVMANT_SAM
 386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                                                            ((__LL_USART_DIVFRAQ_SAM
 387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16_100(__PERIPHCLK__, __BAUDRATE__)     (((__PERIPHCLK__)*25)/(4*(__
 397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (__LL_USART_DIV_SAMPLING16_1
 398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (((__LL_USART_DIV_SAMPLING16
 399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* USART BRR = mantissa + overflow + fraction
 400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****             = (USART DIVMANT << 4) + (USART DIVFRAQ & 0xF0) + (USART DIVFRAQ & 0x0F) */
 401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)            (((__LL_USART_DIVMANT_SAM
 402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
 411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 37


 413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
 421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  USART Enable
 425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         flags, in the USARTx_SR are set to their default values.
 439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 38


 470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Receiver Disable
 472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Transmitter Enable
 483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Transmitter Disable
 494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         of Transmitter and Receiver
 506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
ARM GAS  /tmp/ccYXnoH2.s 			page 39


 527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
ARM GAS  /tmp/ccYXnoH2.s 			page 40


 584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_SetDataWidth
 601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_GetDataWidth
 615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined(USART_CR1_OVER8)
 626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
ARM GAS  /tmp/ccYXnoH2.s 			page 41


 641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return Oversampling mode
 642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif /* USART_OverSampling_Feature */
 654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
ARM GAS  /tmp/ccYXnoH2.s 			page 42


 698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
ARM GAS  /tmp/ccYXnoH2.s 			page 43


 755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
 807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
 811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
ARM GAS  /tmp/ccYXnoH2.s 			page 44


 812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
 813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set the length of the stop bits
 817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
 818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
 827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
 833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
 834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
 842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
 848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
 850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
 851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
 852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
 853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
 854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR1          M             LL_USART_ConfigCharacter\n
 855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
 856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
ARM GAS  /tmp/ccYXnoH2.s 			page 45


 869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
 872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                               uint32_t StopBits)
 873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set Address of the USART node.
 880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
 881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         for wake up with address mark detection.
 882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_SetNodeAddress
 883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  NodeAddress 4 bit Address of the USART node.
 885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetNodeAddress(USART_TypeDef *USARTx, uint32_t NodeAddress)
 888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD, (NodeAddress & USART_CR2_ADD));
 890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return 4 bit Address of the USART node as set in ADD field of CR2.
 894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
 895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
 896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
 898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
 900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD));
 902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
 906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
 909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
 915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
 919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
 922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccYXnoH2.s 			page 46


 926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
 928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
 932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
 935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
 941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
 945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
 948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
 954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
 958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
 961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
 962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
 964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
 971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
 977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
 980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
 981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
ARM GAS  /tmp/ccYXnoH2.s 			page 47


 983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
 988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
 989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
 993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined(USART_CR3_ONEBIT)
 994:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
 995:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable One bit sampling method
 996:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
 997:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
 998:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
 999:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1000:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1001:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1002:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1003:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1004:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1005:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1006:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1007:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1008:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1009:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1010:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1011:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1012:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1013:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1014:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1015:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1016:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1017:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1018:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1019:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1020:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1021:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1022:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1023:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1024:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1025:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1026:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif /* USART_OneBitSampling_Feature */
1027:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1028:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #if defined(USART_CR1_OVER8)
1029:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1030:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1031:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1032:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1033:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1034:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (Baud rate value != 0)
1035:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1036:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1037:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1038:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1039:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
ARM GAS  /tmp/ccYXnoH2.s 			page 48


1040:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1041:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1042:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1043:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1044:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1045:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****                                           uint32_t BaudRate)
1046:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1047:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1048:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   {
1049:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1050:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   }
1051:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   else
1052:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   {
1053:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1054:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   }
1055:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1056:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1057:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1058:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1059:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1060:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1061:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1062:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1063:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1064:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1065:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1066:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1067:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Baud Rate
1068:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1069:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1070:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1071:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1072:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1073:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1074:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1075:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1076:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1077:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   {
1078:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1079:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     {
1080:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1081:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1082:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     }
1083:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   }
1084:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   else
1085:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   {
1086:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1087:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     {
1088:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1089:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     }
1090:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   }
1091:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (brrresult);
1092:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1093:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #else
1094:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1095:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1096:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
ARM GAS  /tmp/ccYXnoH2.s 			page 49


1097:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1098:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1099:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (Baud rate value != 0)
1100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudR
1107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Baud Rate
1119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk)
1121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   if ((usartdiv & 0xFFFFU) != 0U)
1128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   {
1129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****     brrresult = PeriphClk / usartdiv;
1130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   }
1131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (brrresult);
1132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** #endif /* USART_OverSampling_Feature */
1134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
1137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
1141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable IrDA mode
1145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
ARM GAS  /tmp/ccYXnoH2.s 			page 50


1154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable IrDA mode
1158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
ARM GAS  /tmp/ccYXnoH2.s 			page 51


1211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
1244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
1248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
ARM GAS  /tmp/ccYXnoH2.s 			page 52


1268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
ARM GAS  /tmp/ccYXnoH2.s 			page 53


1325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_POSITION_GTPR_GT);
1370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccYXnoH2.s 			page 54


1382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_POSITION_GTPR_GT);
1384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
1388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
1392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
1416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
1418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
1422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
1425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
1429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
1431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
1435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
1438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
ARM GAS  /tmp/ccYXnoH2.s 			page 55


1439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
1443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
1446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
1448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
1453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
1455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
1459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
1462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
1468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
1470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable LIN mode
1474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
1477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
1481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable LIN mode
1487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
1490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
1494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
ARM GAS  /tmp/ccYXnoH2.s 			page 56


1496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
1500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
1503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
1507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
1509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
1513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
1516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
1517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
1521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
1522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
1534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         dedicated functions
1536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
1537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
1538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
1539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
1540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
1541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
1545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
1547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
1548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 57


1553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
1555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
1556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
1561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
1570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
1571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         dedicated functions
1572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
1573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
1574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
1575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
1576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
1577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
1581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
1583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
1588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
1593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
1594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
1599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
1608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
1609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
ARM GAS  /tmp/ccYXnoH2.s 			page 58


1610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         dedicated functions
1611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
1612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
1613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
1614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
1615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
1616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
1617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
1621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
1623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
1624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
1626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
1627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
1628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
1633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
1634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
1639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
1647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
1648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         dedicated functions
1650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
1651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
1652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
1653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
1654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
1655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
1659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
1661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
1663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
1665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
1666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
ARM GAS  /tmp/ccYXnoH2.s 			page 59


1667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
1671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
1672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
1676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
1677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
1678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
1687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
1688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         dedicated functions
1690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
1691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
1692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
1693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
1694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
1695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
1699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
1701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
1703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
1705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
1706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* Synchronous mode is activated by default */
1707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
1708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
1709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
1714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
1715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
1720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
ARM GAS  /tmp/ccYXnoH2.s 			page 60


1724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
1729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
1730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
1731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         dedicated functions
1732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
1733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
1734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
1735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
1736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
1737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
1738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
1742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
1744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
1745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
1746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
1747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
1748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
1749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
1754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
1755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
1756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
1757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
1769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
1770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         dedicated functions
1771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
1772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
1773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
1774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
1775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
1776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
1780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
ARM GAS  /tmp/ccYXnoH2.s 			page 61


1781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
1782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
1790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
1793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
1794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
1798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
1799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
1803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
1805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
1809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
1810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
1814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
1816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
1820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
1821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
1825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
1827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
1831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
1832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
1836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
ARM GAS  /tmp/ccYXnoH2.s 			page 62


1838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
1842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
1843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
1847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
1849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
1853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
1854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
1858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 155              		.loc 2 1858 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 8
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 0000 80B4     		push	{r7}
 161              	.LCFI6:
 162              		.cfi_def_cfa_offset 4
 163              		.cfi_offset 7, -4
 164 0002 83B0     		sub	sp, sp, #12
 165              	.LCFI7:
 166              		.cfi_def_cfa_offset 16
 167 0004 00AF     		add	r7, sp, #0
 168              	.LCFI8:
 169              		.cfi_def_cfa_register 7
 170 0006 7860     		str	r0, [r7, #4]
1859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 171              		.loc 2 1859 0
 172 0008 7B68     		ldr	r3, [r7, #4]
 173 000a 1B68     		ldr	r3, [r3]
 174 000c 03F02003 		and	r3, r3, #32
 175 0010 202B     		cmp	r3, #32
 176 0012 0CBF     		ite	eq
 177 0014 0123     		moveq	r3, #1
 178 0016 0023     		movne	r3, #0
 179 0018 DBB2     		uxtb	r3, r3
1860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 180              		.loc 2 1860 0
 181 001a 1846     		mov	r0, r3
 182 001c 0C37     		adds	r7, r7, #12
 183              	.LCFI9:
 184              		.cfi_def_cfa_offset 4
 185 001e BD46     		mov	sp, r7
 186              	.LCFI10:
 187              		.cfi_def_cfa_register 13
 188              		@ sp needed
ARM GAS  /tmp/ccYXnoH2.s 			page 63


 189 0020 80BC     		pop	{r7}
 190              	.LCFI11:
 191              		.cfi_restore 7
 192              		.cfi_def_cfa_offset 0
 193 0022 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE585:
 197              		.section	.text.LL_USART_IsActiveFlag_TC,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu softvfp
 204              	LL_USART_IsActiveFlag_TC:
 205              	.LFB586:
1861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
1864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
1865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
1869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 206              		.loc 2 1869 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211 0000 80B4     		push	{r7}
 212              	.LCFI12:
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 7, -4
 215 0002 83B0     		sub	sp, sp, #12
 216              	.LCFI13:
 217              		.cfi_def_cfa_offset 16
 218 0004 00AF     		add	r7, sp, #0
 219              	.LCFI14:
 220              		.cfi_def_cfa_register 7
 221 0006 7860     		str	r0, [r7, #4]
1870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 222              		.loc 2 1870 0
 223 0008 7B68     		ldr	r3, [r7, #4]
 224 000a 1B68     		ldr	r3, [r3]
 225 000c 03F04003 		and	r3, r3, #64
 226 0010 402B     		cmp	r3, #64
 227 0012 0CBF     		ite	eq
 228 0014 0123     		moveq	r3, #1
 229 0016 0023     		movne	r3, #0
 230 0018 DBB2     		uxtb	r3, r3
1871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 231              		.loc 2 1871 0
 232 001a 1846     		mov	r0, r3
 233 001c 0C37     		adds	r7, r7, #12
 234              	.LCFI15:
 235              		.cfi_def_cfa_offset 4
 236 001e BD46     		mov	sp, r7
ARM GAS  /tmp/ccYXnoH2.s 			page 64


 237              	.LCFI16:
 238              		.cfi_def_cfa_register 13
 239              		@ sp needed
 240 0020 80BC     		pop	{r7}
 241              	.LCFI17:
 242              		.cfi_restore 7
 243              		.cfi_def_cfa_offset 0
 244 0022 7047     		bx	lr
 245              		.cfi_endproc
 246              	.LFE586:
 248              		.section	.text.LL_USART_ReceiveData8,"ax",%progbits
 249              		.align	1
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu softvfp
 255              	LL_USART_ReceiveData8:
 256              	.LFB632:
1872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
1875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
1876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
1880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
1882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
1886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_IsActiveFlag_LBD
1889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
1893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
1895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
1899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_IsActiveFlag_nCTS
1902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
1906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_CTS) == (USART_SR_CTS));
1908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
ARM GAS  /tmp/ccYXnoH2.s 			page 65


1911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
1912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          SBK           LL_USART_IsActiveFlag_SBK
1913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
1917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_SBK) == (USART_CR1_SBK));
1919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
1923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          RWU           LL_USART_IsActiveFlag_RWU
1924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
1928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RWU) == (USART_CR1_RWU));
1930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
1934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         NE, FE, ORE, IDLE would also be cleared.
1938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_ClearFlag_PE
1939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
1943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
1947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
1949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
1953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         PE, NE, ORE, IDLE would also be cleared.
1957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_ClearFlag_FE
1958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
1962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
1966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
ARM GAS  /tmp/ccYXnoH2.s 			page 66


1968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
1972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         PE, FE, ORE, IDLE would also be cleared.
1976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_ClearFlag_NE
1977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
1981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
1982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
1985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
1987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
1988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
1989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
1990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
1991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1994:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         PE, NE, FE, IDLE would also be cleared.
1995:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
1996:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
1997:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
1998:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
1999:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
2000:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2001:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   __IO uint32_t tmpreg;
2002:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->SR;
2003:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
2004:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->DR;
2005:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
2006:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2007:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2008:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2009:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
2010:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
2011:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
2012:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
2013:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         PE, NE, FE, ORE would also be cleared.
2014:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
2015:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2016:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2017:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2018:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
2019:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2020:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   __IO uint32_t tmpreg;
2021:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->SR;
2022:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
2023:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   tmpreg = USARTx->DR;
2024:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   (void) tmpreg;
ARM GAS  /tmp/ccYXnoH2.s 			page 67


2025:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2026:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2027:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2028:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
2029:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_ClearFlag_TC
2030:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2031:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2032:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2033:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
2034:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2035:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_TC));
2036:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2037:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2038:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2039:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear RX Not Empty Flag
2040:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
2041:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2042:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2043:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2044:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
2045:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2046:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_RXNE));
2047:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2048:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2049:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2050:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
2051:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2052:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2053:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_ClearFlag_LBD
2054:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2055:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2056:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2057:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
2058:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2059:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_LBD));
2060:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2061:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2062:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2063:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
2064:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2065:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2066:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_ClearFlag_nCTS
2067:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2068:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2069:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2070:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2071:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2072:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_CTS));
2073:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2074:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2075:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2076:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
2077:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2078:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2079:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2080:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
2081:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
ARM GAS  /tmp/ccYXnoH2.s 			page 68


2082:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2083:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2084:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2085:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
2086:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2087:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2088:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2089:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2090:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2091:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2092:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2093:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2094:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2095:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
2096:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2097:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2098:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2099:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
2101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
2130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
2134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_PEIE);
2136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
ARM GAS  /tmp/ccYXnoH2.s 			page 69


2139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
2140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
2143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
2147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
2149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable Error Interrupt
2153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           0: Interrupt is inhibited
2156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
2158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
2162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_EIE);
2164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
2168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
2171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
2175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
2177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
2181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
2182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
2186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
2192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
2193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
ARM GAS  /tmp/ccYXnoH2.s 			page 70


2196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
2197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
2203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
2204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
2208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
2210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
2214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
2215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
2219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
2221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
2225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
2226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
2230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
2232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
2236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
2239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
2243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
2245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable Error Interrupt
2249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           0: Interrupt is inhibited
2252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
ARM GAS  /tmp/ccYXnoH2.s 			page 71


2253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
2254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
2258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
2260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
2264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
2267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
2271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
2273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
2277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
2278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
2282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
2284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
2288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
2289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
2293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
2295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
2299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
2300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
2304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
2306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
ARM GAS  /tmp/ccYXnoH2.s 			page 72


2310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
2311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
2315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
2317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
2321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
2322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
2326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE));
2328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
2332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
2335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
2339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE));
2341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
2345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
2346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
2350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
2352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
2356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
2359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
2363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE));
2365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 73


2367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
2369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
2372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
2373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
2377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
2378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
2382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAR);
2384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
2388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
2389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
2393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
2395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
2399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
2400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(USART_TypeDef *USARTx)
2404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR));
2406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
2410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
2411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
2415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAT);
2417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Disable DMA Mode for transmission
2421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_DisableDMAReq_TX
2422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccYXnoH2.s 			page 74


2424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
2426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
2428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for transmission
2432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_IsEnabledDMAReq_TX
2433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_TX(USART_TypeDef *USARTx)
2437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAT) == (USART_CR3_DMAT));
2439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Get the data register address used for DMA transfer
2443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_DMA_GetRegAddr
2444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @note   Address of Data Register is valid for both Transmit and Receive transfers.
2445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Address of data register
2447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
2449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   /* return address of DR register */
2451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return ((uint32_t) &(USARTx->DR));
2452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @}
2456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Data_Management Data_Management
2459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @{
2460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 8 bits)
2464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData8
2465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
2469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 257              		.loc 2 2469 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 8
 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262 0000 80B4     		push	{r7}
 263              	.LCFI18:
 264              		.cfi_def_cfa_offset 4
 265              		.cfi_offset 7, -4
 266 0002 83B0     		sub	sp, sp, #12
 267              	.LCFI19:
ARM GAS  /tmp/ccYXnoH2.s 			page 75


 268              		.cfi_def_cfa_offset 16
 269 0004 00AF     		add	r7, sp, #0
 270              	.LCFI20:
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
2470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 273              		.loc 2 2470 0
 274 0008 7B68     		ldr	r3, [r7, #4]
 275 000a 5B68     		ldr	r3, [r3, #4]
 276 000c DBB2     		uxtb	r3, r3
2471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 277              		.loc 2 2471 0
 278 000e 1846     		mov	r0, r3
 279 0010 0C37     		adds	r7, r7, #12
 280              	.LCFI21:
 281              		.cfi_def_cfa_offset 4
 282 0012 BD46     		mov	sp, r7
 283              	.LCFI22:
 284              		.cfi_def_cfa_register 13
 285              		@ sp needed
 286 0014 80BC     		pop	{r7}
 287              	.LCFI23:
 288              		.cfi_restore 7
 289              		.cfi_def_cfa_offset 0
 290 0016 7047     		bx	lr
 291              		.cfi_endproc
 292              	.LFE632:
 294              		.section	.text.LL_USART_TransmitData8,"ax",%progbits
 295              		.align	1
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 299              		.fpu softvfp
 301              	LL_USART_TransmitData8:
 302              	.LFB634:
2472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 9 bits)
2475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData9
2476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
2478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
2480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
2481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   return (uint16_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
2483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** 
2484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** /**
2485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @brief  Write in Transmitter Data Register (Transmit Data value, 8 bits)
2486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_TransmitData8
2487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  USARTx USART Instance
2488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @param  Value between Min_Data=0x00 and Max_Data=0xFF
2489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   * @retval None
2490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   */
2491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
2492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** {
 303              		.loc 2 2492 0
ARM GAS  /tmp/ccYXnoH2.s 			page 76


 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 8
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308 0000 80B4     		push	{r7}
 309              	.LCFI24:
 310              		.cfi_def_cfa_offset 4
 311              		.cfi_offset 7, -4
 312 0002 83B0     		sub	sp, sp, #12
 313              	.LCFI25:
 314              		.cfi_def_cfa_offset 16
 315 0004 00AF     		add	r7, sp, #0
 316              	.LCFI26:
 317              		.cfi_def_cfa_register 7
 318 0006 7860     		str	r0, [r7, #4]
 319 0008 0B46     		mov	r3, r1
 320 000a FB70     		strb	r3, [r7, #3]
2493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h ****   USARTx->DR = Value;
 321              		.loc 2 2493 0
 322 000c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 323 000e 7B68     		ldr	r3, [r7, #4]
 324 0010 5A60     		str	r2, [r3, #4]
2494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usart.h **** }
 325              		.loc 2 2494 0
 326 0012 00BF     		nop
 327 0014 0C37     		adds	r7, r7, #12
 328              	.LCFI27:
 329              		.cfi_def_cfa_offset 4
 330 0016 BD46     		mov	sp, r7
 331              	.LCFI28:
 332              		.cfi_def_cfa_register 13
 333              		@ sp needed
 334 0018 80BC     		pop	{r7}
 335              	.LCFI29:
 336              		.cfi_restore 7
 337              		.cfi_def_cfa_offset 0
 338 001a 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE634:
 342              		.section	.text.NMI_Handler,"ax",%progbits
 343              		.align	1
 344              		.global	NMI_Handler
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 348              		.fpu softvfp
 350              	NMI_Handler:
 351              	.LFB701:
 352              		.file 3 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
ARM GAS  /tmp/ccYXnoH2.s 			page 77


   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f1xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f1xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c ****  
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** 
  60:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  61:Src/stm32f1xx_it.c **** 
  62:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  63:Src/stm32f1xx_it.c **** 
  64:Src/stm32f1xx_it.c **** /******************************************************************************/
  65:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
ARM GAS  /tmp/ccYXnoH2.s 			page 78


  66:Src/stm32f1xx_it.c **** /******************************************************************************/
  67:Src/stm32f1xx_it.c **** /**
  68:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  69:Src/stm32f1xx_it.c ****   */
  70:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  71:Src/stm32f1xx_it.c **** {
 353              		.loc 3 71 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358 0000 80B4     		push	{r7}
 359              	.LCFI30:
 360              		.cfi_def_cfa_offset 4
 361              		.cfi_offset 7, -4
 362 0002 00AF     		add	r7, sp, #0
 363              	.LCFI31:
 364              		.cfi_def_cfa_register 7
  72:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  73:Src/stm32f1xx_it.c **** 
  74:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  75:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  76:Src/stm32f1xx_it.c **** 
  77:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  78:Src/stm32f1xx_it.c **** }
 365              		.loc 3 78 0
 366 0004 00BF     		nop
 367 0006 BD46     		mov	sp, r7
 368              	.LCFI32:
 369              		.cfi_def_cfa_register 13
 370              		@ sp needed
 371 0008 80BC     		pop	{r7}
 372              	.LCFI33:
 373              		.cfi_restore 7
 374              		.cfi_def_cfa_offset 0
 375 000a 7047     		bx	lr
 376              		.cfi_endproc
 377              	.LFE701:
 379              		.section	.text.HardFault_Handler,"ax",%progbits
 380              		.align	1
 381              		.global	HardFault_Handler
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu softvfp
 387              	HardFault_Handler:
 388              	.LFB702:
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c **** /**
  81:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  82:Src/stm32f1xx_it.c ****   */
  83:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  84:Src/stm32f1xx_it.c **** {
 389              		.loc 3 84 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccYXnoH2.s 			page 79


 393              		@ link register save eliminated.
 394 0000 80B4     		push	{r7}
 395              	.LCFI34:
 396              		.cfi_def_cfa_offset 4
 397              		.cfi_offset 7, -4
 398 0002 00AF     		add	r7, sp, #0
 399              	.LCFI35:
 400              		.cfi_def_cfa_register 7
 401              	.L13:
  85:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  86:Src/stm32f1xx_it.c **** 
  87:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  88:Src/stm32f1xx_it.c ****   while (1)
 402              		.loc 3 88 0 discriminator 1
 403 0004 FEE7     		b	.L13
 404              		.cfi_endproc
 405              	.LFE702:
 407              		.section	.text.MemManage_Handler,"ax",%progbits
 408              		.align	1
 409              		.global	MemManage_Handler
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu softvfp
 415              	MemManage_Handler:
 416              	.LFB703:
  89:Src/stm32f1xx_it.c ****   {
  90:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  91:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  92:Src/stm32f1xx_it.c ****   }
  93:Src/stm32f1xx_it.c **** }
  94:Src/stm32f1xx_it.c **** 
  95:Src/stm32f1xx_it.c **** /**
  96:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
  97:Src/stm32f1xx_it.c ****   */
  98:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  99:Src/stm32f1xx_it.c **** {
 417              		.loc 3 99 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 1, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422 0000 80B4     		push	{r7}
 423              	.LCFI36:
 424              		.cfi_def_cfa_offset 4
 425              		.cfi_offset 7, -4
 426 0002 00AF     		add	r7, sp, #0
 427              	.LCFI37:
 428              		.cfi_def_cfa_register 7
 429              	.L15:
 100:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 101:Src/stm32f1xx_it.c **** 
 102:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 103:Src/stm32f1xx_it.c ****   while (1)
 430              		.loc 3 103 0 discriminator 1
 431 0004 FEE7     		b	.L15
 432              		.cfi_endproc
ARM GAS  /tmp/ccYXnoH2.s 			page 80


 433              	.LFE703:
 435              		.section	.text.BusFault_Handler,"ax",%progbits
 436              		.align	1
 437              		.global	BusFault_Handler
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu softvfp
 443              	BusFault_Handler:
 444              	.LFB704:
 104:Src/stm32f1xx_it.c ****   {
 105:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 106:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 107:Src/stm32f1xx_it.c ****   }
 108:Src/stm32f1xx_it.c **** }
 109:Src/stm32f1xx_it.c **** 
 110:Src/stm32f1xx_it.c **** /**
 111:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 112:Src/stm32f1xx_it.c ****   */
 113:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 114:Src/stm32f1xx_it.c **** {
 445              		.loc 3 114 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450 0000 80B4     		push	{r7}
 451              	.LCFI38:
 452              		.cfi_def_cfa_offset 4
 453              		.cfi_offset 7, -4
 454 0002 00AF     		add	r7, sp, #0
 455              	.LCFI39:
 456              		.cfi_def_cfa_register 7
 457              	.L17:
 115:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 116:Src/stm32f1xx_it.c **** 
 117:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 118:Src/stm32f1xx_it.c ****   while (1)
 458              		.loc 3 118 0 discriminator 1
 459 0004 FEE7     		b	.L17
 460              		.cfi_endproc
 461              	.LFE704:
 463              		.section	.text.UsageFault_Handler,"ax",%progbits
 464              		.align	1
 465              		.global	UsageFault_Handler
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu softvfp
 471              	UsageFault_Handler:
 472              	.LFB705:
 119:Src/stm32f1xx_it.c ****   {
 120:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 121:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 122:Src/stm32f1xx_it.c ****   }
 123:Src/stm32f1xx_it.c **** }
 124:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccYXnoH2.s 			page 81


 125:Src/stm32f1xx_it.c **** /**
 126:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 127:Src/stm32f1xx_it.c ****   */
 128:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 129:Src/stm32f1xx_it.c **** {
 473              		.loc 3 129 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478 0000 80B4     		push	{r7}
 479              	.LCFI40:
 480              		.cfi_def_cfa_offset 4
 481              		.cfi_offset 7, -4
 482 0002 00AF     		add	r7, sp, #0
 483              	.LCFI41:
 484              		.cfi_def_cfa_register 7
 485              	.L19:
 130:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 131:Src/stm32f1xx_it.c **** 
 132:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 133:Src/stm32f1xx_it.c ****   while (1)
 486              		.loc 3 133 0 discriminator 1
 487 0004 FEE7     		b	.L19
 488              		.cfi_endproc
 489              	.LFE705:
 491              		.section	.text.SVC_Handler,"ax",%progbits
 492              		.align	1
 493              		.global	SVC_Handler
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 497              		.fpu softvfp
 499              	SVC_Handler:
 500              	.LFB706:
 134:Src/stm32f1xx_it.c ****   {
 135:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 137:Src/stm32f1xx_it.c ****   }
 138:Src/stm32f1xx_it.c **** }
 139:Src/stm32f1xx_it.c **** 
 140:Src/stm32f1xx_it.c **** /**
 141:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 142:Src/stm32f1xx_it.c ****   */
 143:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 144:Src/stm32f1xx_it.c **** {
 501              		.loc 3 144 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506 0000 80B4     		push	{r7}
 507              	.LCFI42:
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 0002 00AF     		add	r7, sp, #0
 511              	.LCFI43:
ARM GAS  /tmp/ccYXnoH2.s 			page 82


 512              		.cfi_def_cfa_register 7
 145:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 146:Src/stm32f1xx_it.c **** 
 147:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 151:Src/stm32f1xx_it.c **** }
 513              		.loc 3 151 0
 514 0004 00BF     		nop
 515 0006 BD46     		mov	sp, r7
 516              	.LCFI44:
 517              		.cfi_def_cfa_register 13
 518              		@ sp needed
 519 0008 80BC     		pop	{r7}
 520              	.LCFI45:
 521              		.cfi_restore 7
 522              		.cfi_def_cfa_offset 0
 523 000a 7047     		bx	lr
 524              		.cfi_endproc
 525              	.LFE706:
 527              		.section	.text.DebugMon_Handler,"ax",%progbits
 528              		.align	1
 529              		.global	DebugMon_Handler
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 533              		.fpu softvfp
 535              	DebugMon_Handler:
 536              	.LFB707:
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c **** /**
 154:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 155:Src/stm32f1xx_it.c ****   */
 156:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 157:Src/stm32f1xx_it.c **** {
 537              		.loc 3 157 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542 0000 80B4     		push	{r7}
 543              	.LCFI46:
 544              		.cfi_def_cfa_offset 4
 545              		.cfi_offset 7, -4
 546 0002 00AF     		add	r7, sp, #0
 547              	.LCFI47:
 548              		.cfi_def_cfa_register 7
 158:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 159:Src/stm32f1xx_it.c **** 
 160:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 164:Src/stm32f1xx_it.c **** }
 549              		.loc 3 164 0
 550 0004 00BF     		nop
ARM GAS  /tmp/ccYXnoH2.s 			page 83


 551 0006 BD46     		mov	sp, r7
 552              	.LCFI48:
 553              		.cfi_def_cfa_register 13
 554              		@ sp needed
 555 0008 80BC     		pop	{r7}
 556              	.LCFI49:
 557              		.cfi_restore 7
 558              		.cfi_def_cfa_offset 0
 559 000a 7047     		bx	lr
 560              		.cfi_endproc
 561              	.LFE707:
 563              		.section	.text.PendSV_Handler,"ax",%progbits
 564              		.align	1
 565              		.global	PendSV_Handler
 566              		.syntax unified
 567              		.thumb
 568              		.thumb_func
 569              		.fpu softvfp
 571              	PendSV_Handler:
 572              	.LFB708:
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c **** /**
 167:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 168:Src/stm32f1xx_it.c ****   */
 169:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 170:Src/stm32f1xx_it.c **** {
 573              		.loc 3 170 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 0
 576              		@ frame_needed = 1, uses_anonymous_args = 0
 577              		@ link register save eliminated.
 578 0000 80B4     		push	{r7}
 579              	.LCFI50:
 580              		.cfi_def_cfa_offset 4
 581              		.cfi_offset 7, -4
 582 0002 00AF     		add	r7, sp, #0
 583              	.LCFI51:
 584              		.cfi_def_cfa_register 7
 171:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 172:Src/stm32f1xx_it.c **** 
 173:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 174:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 175:Src/stm32f1xx_it.c **** 
 176:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 177:Src/stm32f1xx_it.c **** }
 585              		.loc 3 177 0
 586 0004 00BF     		nop
 587 0006 BD46     		mov	sp, r7
 588              	.LCFI52:
 589              		.cfi_def_cfa_register 13
 590              		@ sp needed
 591 0008 80BC     		pop	{r7}
 592              	.LCFI53:
 593              		.cfi_restore 7
 594              		.cfi_def_cfa_offset 0
 595 000a 7047     		bx	lr
 596              		.cfi_endproc
ARM GAS  /tmp/ccYXnoH2.s 			page 84


 597              	.LFE708:
 599              		.section	.text.SysTick_Handler,"ax",%progbits
 600              		.align	1
 601              		.global	SysTick_Handler
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu softvfp
 607              	SysTick_Handler:
 608              	.LFB709:
 178:Src/stm32f1xx_it.c **** 
 179:Src/stm32f1xx_it.c **** /**
 180:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 181:Src/stm32f1xx_it.c ****   */
 182:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 183:Src/stm32f1xx_it.c **** {
 609              		.loc 3 183 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614 0000 80B4     		push	{r7}
 615              	.LCFI54:
 616              		.cfi_def_cfa_offset 4
 617              		.cfi_offset 7, -4
 618 0002 00AF     		add	r7, sp, #0
 619              	.LCFI55:
 620              		.cfi_def_cfa_register 7
 184:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 185:Src/stm32f1xx_it.c **** 
 186:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 187:Src/stm32f1xx_it.c ****   
 188:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 189:Src/stm32f1xx_it.c **** 
 190:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 191:Src/stm32f1xx_it.c **** }
 621              		.loc 3 191 0
 622 0004 00BF     		nop
 623 0006 BD46     		mov	sp, r7
 624              	.LCFI56:
 625              		.cfi_def_cfa_register 13
 626              		@ sp needed
 627 0008 80BC     		pop	{r7}
 628              	.LCFI57:
 629              		.cfi_restore 7
 630              		.cfi_def_cfa_offset 0
 631 000a 7047     		bx	lr
 632              		.cfi_endproc
 633              	.LFE709:
 635              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 636              		.align	1
 637              		.global	TIM2_IRQHandler
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu softvfp
 643              	TIM2_IRQHandler:
ARM GAS  /tmp/ccYXnoH2.s 			page 85


 644              	.LFB710:
 192:Src/stm32f1xx_it.c **** 
 193:Src/stm32f1xx_it.c **** /******************************************************************************/
 194:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 195:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 196:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 197:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 198:Src/stm32f1xx_it.c **** /******************************************************************************/
 199:Src/stm32f1xx_it.c **** 
 200:Src/stm32f1xx_it.c **** /**
 201:Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 202:Src/stm32f1xx_it.c ****   */
 203:Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
 204:Src/stm32f1xx_it.c **** {
 645              		.loc 3 204 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 1, uses_anonymous_args = 0
 649 0000 80B5     		push	{r7, lr}
 650              	.LCFI58:
 651              		.cfi_def_cfa_offset 8
 652              		.cfi_offset 7, -8
 653              		.cfi_offset 14, -4
 654 0002 00AF     		add	r7, sp, #0
 655              	.LCFI59:
 656              		.cfi_def_cfa_register 7
 205:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 206:Src/stm32f1xx_it.c ****     LL_mDelay(10);
 657              		.loc 3 206 0
 658 0004 0A20     		movs	r0, #10
 659 0006 FFF7FEFF 		bl	LL_mDelay
 207:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 208:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 209:Src/stm32f1xx_it.c **** 
 210:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 211:Src/stm32f1xx_it.c **** }
 660              		.loc 3 211 0
 661 000a 00BF     		nop
 662 000c 80BD     		pop	{r7, pc}
 663              		.cfi_endproc
 664              	.LFE710:
 666              		.section	.text.USART1_IRQHandler,"ax",%progbits
 667              		.align	1
 668              		.global	USART1_IRQHandler
 669              		.syntax unified
 670              		.thumb
 671              		.thumb_func
 672              		.fpu softvfp
 674              	USART1_IRQHandler:
 675              	.LFB711:
 212:Src/stm32f1xx_it.c **** 
 213:Src/stm32f1xx_it.c **** /**
 214:Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 215:Src/stm32f1xx_it.c ****   */
 216:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 217:Src/stm32f1xx_it.c **** {
 676              		.loc 3 217 0
ARM GAS  /tmp/ccYXnoH2.s 			page 86


 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 8
 679              		@ frame_needed = 1, uses_anonymous_args = 0
 680 0000 80B5     		push	{r7, lr}
 681              	.LCFI60:
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 14, -4
 685 0002 82B0     		sub	sp, sp, #8
 686              	.LCFI61:
 687              		.cfi_def_cfa_offset 16
 688 0004 00AF     		add	r7, sp, #0
 689              	.LCFI62:
 690              		.cfi_def_cfa_register 7
 218:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 219:Src/stm32f1xx_it.c ****     uint8_t data;
 220:Src/stm32f1xx_it.c ****     char send_data = 0;
 691              		.loc 3 220 0
 692 0006 0023     		movs	r3, #0
 693 0008 FB71     		strb	r3, [r7, #7]
 221:Src/stm32f1xx_it.c ****     if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 694              		.loc 3 221 0
 695 000a 2548     		ldr	r0, .L30
 696 000c FFF7FEFF 		bl	LL_USART_IsActiveFlag_RXNE
 697 0010 0346     		mov	r3, r0
 698 0012 002B     		cmp	r3, #0
 699 0014 17D0     		beq	.L26
 222:Src/stm32f1xx_it.c ****             data = LL_USART_ReceiveData8(USART1);
 700              		.loc 3 222 0
 701 0016 2248     		ldr	r0, .L30
 702 0018 FFF7FEFF 		bl	LL_USART_ReceiveData8
 703 001c 0346     		mov	r3, r0
 704 001e BB71     		strb	r3, [r7, #6]
 223:Src/stm32f1xx_it.c ****             send_data = 1;
 705              		.loc 3 223 0
 706 0020 0123     		movs	r3, #1
 707 0022 FB71     		strb	r3, [r7, #7]
 224:Src/stm32f1xx_it.c ****             //LL_USART_ClearFlag_RXNE(USART1);
 225:Src/stm32f1xx_it.c ****             midiRxBufferEndIndex += 1;
 708              		.loc 3 225 0
 709 0024 1F4B     		ldr	r3, .L30+4
 710 0026 1B68     		ldr	r3, [r3]
 711 0028 0133     		adds	r3, r3, #1
 712 002a 1E4A     		ldr	r2, .L30+4
 713 002c 1360     		str	r3, [r2]
 226:Src/stm32f1xx_it.c ****             midiRxBuffer[midiRxBufferEndIndex] = data;
 714              		.loc 3 226 0
 715 002e 1D4B     		ldr	r3, .L30+4
 716 0030 1B68     		ldr	r3, [r3]
 717 0032 1D49     		ldr	r1, .L30+8
 718 0034 BA79     		ldrb	r2, [r7, #6]
 719 0036 CA54     		strb	r2, [r1, r3]
 227:Src/stm32f1xx_it.c ****             if (midiRxBufferEndIndex >= MIDIRXBUFFER_SIZE) {
 720              		.loc 3 227 0
 721 0038 1A4B     		ldr	r3, .L30+4
 722 003a 1B68     		ldr	r3, [r3]
 723 003c 632B     		cmp	r3, #99
ARM GAS  /tmp/ccYXnoH2.s 			page 87


 724 003e 02DD     		ble	.L26
 228:Src/stm32f1xx_it.c ****                 midiRxBufferEndIndex = 0;
 725              		.loc 3 228 0
 726 0040 184B     		ldr	r3, .L30+4
 727 0042 0022     		movs	r2, #0
 728 0044 1A60     		str	r2, [r3]
 729              	.L26:
 229:Src/stm32f1xx_it.c ****             }
 230:Src/stm32f1xx_it.c ****         }
 231:Src/stm32f1xx_it.c ****     if (LL_USART_IsActiveFlag_TC(USART1) || send_data) {
 730              		.loc 3 231 0
 731 0046 1648     		ldr	r0, .L30
 732 0048 FFF7FEFF 		bl	LL_USART_IsActiveFlag_TC
 733 004c 0346     		mov	r3, r0
 734 004e 002B     		cmp	r3, #0
 735 0050 02D1     		bne	.L27
 736              		.loc 3 231 0 is_stmt 0 discriminator 1
 737 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 738 0054 002B     		cmp	r3, #0
 739 0056 1BD0     		beq	.L28
 740              	.L27:
 232:Src/stm32f1xx_it.c ****         if (midiRxBufferStartIndex != midiRxBufferEndIndex) {
 741              		.loc 3 232 0 is_stmt 1
 742 0058 144B     		ldr	r3, .L30+12
 743 005a 1A68     		ldr	r2, [r3]
 744 005c 114B     		ldr	r3, .L30+4
 745 005e 1B68     		ldr	r3, [r3]
 746 0060 9A42     		cmp	r2, r3
 747 0062 15D0     		beq	.L28
 233:Src/stm32f1xx_it.c ****             data = midiRxBuffer[midiRxBufferStartIndex];
 748              		.loc 3 233 0
 749 0064 114B     		ldr	r3, .L30+12
 750 0066 1B68     		ldr	r3, [r3]
 751 0068 0F4A     		ldr	r2, .L30+8
 752 006a D35C     		ldrb	r3, [r2, r3]
 753 006c BB71     		strb	r3, [r7, #6]
 234:Src/stm32f1xx_it.c ****             midiRxBufferStartIndex += 1;
 754              		.loc 3 234 0
 755 006e 0F4B     		ldr	r3, .L30+12
 756 0070 1B68     		ldr	r3, [r3]
 757 0072 0133     		adds	r3, r3, #1
 758 0074 0D4A     		ldr	r2, .L30+12
 759 0076 1360     		str	r3, [r2]
 235:Src/stm32f1xx_it.c ****             if (midiRxBufferStartIndex >= MIDIRXBUFFER_SIZE) {
 760              		.loc 3 235 0
 761 0078 0C4B     		ldr	r3, .L30+12
 762 007a 1B68     		ldr	r3, [r3]
 763 007c 632B     		cmp	r3, #99
 764 007e 02DD     		ble	.L29
 236:Src/stm32f1xx_it.c ****                 midiRxBufferStartIndex = 0;
 765              		.loc 3 236 0
 766 0080 0A4B     		ldr	r3, .L30+12
 767 0082 0022     		movs	r2, #0
 768 0084 1A60     		str	r2, [r3]
 769              	.L29:
 237:Src/stm32f1xx_it.c ****             }
 238:Src/stm32f1xx_it.c ****             LL_USART_TransmitData8(USART1, data);
ARM GAS  /tmp/ccYXnoH2.s 			page 88


 770              		.loc 3 238 0
 771 0086 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 772 0088 1946     		mov	r1, r3
 773 008a 0548     		ldr	r0, .L30
 774 008c FFF7FEFF 		bl	LL_USART_TransmitData8
 775              	.L28:
 239:Src/stm32f1xx_it.c ****         }
 240:Src/stm32f1xx_it.c ****     }
 241:Src/stm32f1xx_it.c ****     NVIC_ClearPendingIRQ(USART1_IRQn);
 776              		.loc 3 241 0
 777 0090 2520     		movs	r0, #37
 778 0092 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 242:Src/stm32f1xx_it.c **** 
 243:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 244:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 245:Src/stm32f1xx_it.c **** 
 246:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 247:Src/stm32f1xx_it.c **** }
 779              		.loc 3 247 0
 780 0096 00BF     		nop
 781 0098 0837     		adds	r7, r7, #8
 782              	.LCFI63:
 783              		.cfi_def_cfa_offset 8
 784 009a BD46     		mov	sp, r7
 785              	.LCFI64:
 786              		.cfi_def_cfa_register 13
 787              		@ sp needed
 788 009c 80BD     		pop	{r7, pc}
 789              	.L31:
 790 009e 00BF     		.align	2
 791              	.L30:
 792 00a0 00380140 		.word	1073821696
 793 00a4 00000000 		.word	midiRxBufferEndIndex
 794 00a8 00000000 		.word	midiRxBuffer
 795 00ac 00000000 		.word	midiRxBufferStartIndex
 796              		.cfi_endproc
 797              	.LFE711:
 799              		.text
 800              	.Letext0:
 801              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 802              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 803              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 804              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 805              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h"
 806              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
 807              		.file 10 "Inc/midiControl.h"
ARM GAS  /tmp/ccYXnoH2.s 			page 89


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccYXnoH2.s:16     .text.NVIC_ClearPendingIRQ:0000000000000000 $t
     /tmp/ccYXnoH2.s:22     .text.NVIC_ClearPendingIRQ:0000000000000000 NVIC_ClearPendingIRQ
     /tmp/ccYXnoH2.s:69     .text.NVIC_ClearPendingIRQ:0000000000000030 $d
     /tmp/ccYXnoH2.s:74     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccYXnoH2.s:77     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
     /tmp/ccYXnoH2.s:86     .rodata.OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccYXnoH2.s:89     .rodata.OFFSET_TAB_CCMRx:0000000000000000 OFFSET_TAB_CCMRx
     /tmp/ccYXnoH2.s:98     .rodata.SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccYXnoH2.s:101    .rodata.SHIFT_TAB_OCxx:0000000000000000 SHIFT_TAB_OCxx
     /tmp/ccYXnoH2.s:110    .rodata.SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccYXnoH2.s:113    .rodata.SHIFT_TAB_ICxx:0000000000000000 SHIFT_TAB_ICxx
     /tmp/ccYXnoH2.s:122    .rodata.SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccYXnoH2.s:125    .rodata.SHIFT_TAB_CCxP:0000000000000000 SHIFT_TAB_CCxP
     /tmp/ccYXnoH2.s:134    .rodata.SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccYXnoH2.s:137    .rodata.SHIFT_TAB_OISx:0000000000000000 SHIFT_TAB_OISx
     /tmp/ccYXnoH2.s:146    .text.LL_USART_IsActiveFlag_RXNE:0000000000000000 $t
     /tmp/ccYXnoH2.s:152    .text.LL_USART_IsActiveFlag_RXNE:0000000000000000 LL_USART_IsActiveFlag_RXNE
     /tmp/ccYXnoH2.s:198    .text.LL_USART_IsActiveFlag_TC:0000000000000000 $t
     /tmp/ccYXnoH2.s:204    .text.LL_USART_IsActiveFlag_TC:0000000000000000 LL_USART_IsActiveFlag_TC
     /tmp/ccYXnoH2.s:249    .text.LL_USART_ReceiveData8:0000000000000000 $t
     /tmp/ccYXnoH2.s:255    .text.LL_USART_ReceiveData8:0000000000000000 LL_USART_ReceiveData8
     /tmp/ccYXnoH2.s:295    .text.LL_USART_TransmitData8:0000000000000000 $t
     /tmp/ccYXnoH2.s:301    .text.LL_USART_TransmitData8:0000000000000000 LL_USART_TransmitData8
     /tmp/ccYXnoH2.s:343    .text.NMI_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:350    .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccYXnoH2.s:380    .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:387    .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccYXnoH2.s:408    .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:415    .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccYXnoH2.s:436    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:443    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccYXnoH2.s:464    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:471    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccYXnoH2.s:492    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:499    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccYXnoH2.s:528    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:535    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccYXnoH2.s:564    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:571    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccYXnoH2.s:600    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccYXnoH2.s:607    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccYXnoH2.s:636    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccYXnoH2.s:643    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccYXnoH2.s:667    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccYXnoH2.s:674    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccYXnoH2.s:792    .text.USART1_IRQHandler:00000000000000a0 $d
                           .group:0000000000000000 wm4.0.3946371c97d0a222db2c40aaaa70ce2e
                           .group:0000000000000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stm32f1xx.h.57.c2a10934f4c6830aeb7e4997f02806f1
                           .group:0000000000000000 wm4.stm32f103xb.h.56.66305a77cea9d5300aac997a78930076
ARM GAS  /tmp/ccYXnoH2.s 			page 90


                           .group:0000000000000000 wm4.core_cm3.h.42.2a8e0c96b09547b9973a4a18db1ac16e
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:0000000000000000 wm4.core_cm3.h.175.a6c441adf1a05ce96eea3cf78e6687ab
                           .group:0000000000000000 wm4.stm32f103xb.h.619.22d758ea40bb8f555fe007e299ff5828
                           .group:0000000000000000 wm4.stm32f1xx.h.180.c0013e6ebd6ad07f67c298190b8eac92
                           .group:0000000000000000 wm4.stm32f1xx_ll_rcc.h.133.f2c6b39aafa6dc41b1f80066964a517a
                           .group:0000000000000000 wm4.stm32f1xx_ll_bus.h.55.b62a26ffaac5157df7e1c6646444baca
                           .group:0000000000000000 wm4.stm32f1xx_ll_system.h.50.25f6bc0dfea888a7947450c77fd3f3ce
                           .group:0000000000000000 wm4.stm32f1xx_ll_exti.h.38.b2302a3f1b3c0406d04c4166dc2ab6b9
                           .group:0000000000000000 wm4.stm32f1xx_ll_cortex.h.54.d72579fbac3fba8c27d23f5f86c5a2d0
                           .group:0000000000000000 wm4.stm32f1xx_ll_utils.h.50.defdd3826689e2648050ec6def2cb464
                           .group:0000000000000000 wm4.stm32f1xx_ll_pwr.h.38.f2a5845cec5a51652c5c1799688667a3
                           .group:0000000000000000 wm4.stm32f1xx_ll_dma.h.38.c318779340499782ef5ff02b83153b4b
                           .group:0000000000000000 wm4.stm32f1xx_ll_tim.h.38.f5d216c51972265e657c63880bebcf3c
                           .group:0000000000000000 wm4.stm32f1xx_ll_usart.h.38.10e90e64d2ace6efadef6942de41f5f5
                           .group:0000000000000000 wm4.stm32f1xx_ll_gpio.h.38.4ef834ebcab1a56c81b925fcc4e4b857
                           .group:0000000000000000 wm4.main.h.78.8c514909862547cb0ec590b4e8cce29b
                           .group:0000000000000000 wm4.midiControl.h.2.cde6cdb42241881ff0d53d1686203b25

UNDEFINED SYMBOLS
LL_mDelay
midiRxBufferEndIndex
midiRxBuffer
midiRxBufferStartIndex
