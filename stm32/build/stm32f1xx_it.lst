ARM GAS  /tmp/cchNdxuF.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata.CHANNEL_OFFSET_TAB,"a",%progbits
  16              		.align	2
  19              	CHANNEL_OFFSET_TAB:
  20 0000 08       		.byte	8
  21 0001 1C       		.byte	28
  22 0002 30       		.byte	48
  23 0003 44       		.byte	68
  24 0004 58       		.byte	88
  25 0005 6C       		.byte	108
  26 0006 80       		.byte	-128
  27              		.section	.rodata.OFFSET_TAB_CCMRx,"a",%progbits
  28              		.align	2
  31              	OFFSET_TAB_CCMRx:
  32 0000 00       		.byte	0
  33 0001 00       		.byte	0
  34 0002 00       		.byte	0
  35 0003 00       		.byte	0
  36 0004 04       		.byte	4
  37 0005 04       		.byte	4
  38 0006 04       		.byte	4
  39              		.section	.rodata.SHIFT_TAB_OCxx,"a",%progbits
  40              		.align	2
  43              	SHIFT_TAB_OCxx:
  44 0000 00       		.byte	0
  45 0001 00       		.byte	0
  46 0002 08       		.byte	8
  47 0003 00       		.byte	0
  48 0004 00       		.byte	0
  49 0005 00       		.byte	0
  50 0006 08       		.byte	8
  51              		.section	.rodata.SHIFT_TAB_ICxx,"a",%progbits
  52              		.align	2
  55              	SHIFT_TAB_ICxx:
  56 0000 00       		.byte	0
  57 0001 00       		.byte	0
  58 0002 08       		.byte	8
  59 0003 00       		.byte	0
  60 0004 00       		.byte	0
  61 0005 00       		.byte	0
  62 0006 08       		.byte	8
  63              		.section	.rodata.SHIFT_TAB_CCxP,"a",%progbits
  64              		.align	2
  67              	SHIFT_TAB_CCxP:
ARM GAS  /tmp/cchNdxuF.s 			page 2


  68 0000 00       		.byte	0
  69 0001 02       		.byte	2
  70 0002 04       		.byte	4
  71 0003 06       		.byte	6
  72 0004 08       		.byte	8
  73 0005 0A       		.byte	10
  74 0006 0C       		.byte	12
  75              		.section	.rodata.SHIFT_TAB_OISx,"a",%progbits
  76              		.align	2
  79              	SHIFT_TAB_OISx:
  80 0000 00       		.byte	0
  81 0001 01       		.byte	1
  82 0002 02       		.byte	2
  83 0003 03       		.byte	3
  84 0004 04       		.byte	4
  85 0005 05       		.byte	5
  86 0006 06       		.byte	6
  87              		.section	.text.NMI_Handler,"ax",%progbits
  88              		.align	1
  89              		.global	NMI_Handler
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu softvfp
  95              	NMI_Handler:
  96              	.LFB701:
  97              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f1xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f1xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/cchNdxuF.s 			page 3


  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c ****  
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** 
  60:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  61:Src/stm32f1xx_it.c **** 
  62:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  63:Src/stm32f1xx_it.c **** 
  64:Src/stm32f1xx_it.c **** /******************************************************************************/
  65:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
  66:Src/stm32f1xx_it.c **** /******************************************************************************/
  67:Src/stm32f1xx_it.c **** /**
  68:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  69:Src/stm32f1xx_it.c ****   */
  70:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  71:Src/stm32f1xx_it.c **** {
  98              		.loc 1 71 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103 0000 80B4     		push	{r7}
 104              	.LCFI0:
 105              		.cfi_def_cfa_offset 4
 106              		.cfi_offset 7, -4
 107 0002 00AF     		add	r7, sp, #0
 108              	.LCFI1:
 109              		.cfi_def_cfa_register 7
  72:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  73:Src/stm32f1xx_it.c **** 
  74:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  75:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
ARM GAS  /tmp/cchNdxuF.s 			page 4


  76:Src/stm32f1xx_it.c **** 
  77:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  78:Src/stm32f1xx_it.c **** }
 110              		.loc 1 78 0
 111 0004 00BF     		nop
 112 0006 BD46     		mov	sp, r7
 113              	.LCFI2:
 114              		.cfi_def_cfa_register 13
 115              		@ sp needed
 116 0008 80BC     		pop	{r7}
 117              	.LCFI3:
 118              		.cfi_restore 7
 119              		.cfi_def_cfa_offset 0
 120 000a 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE701:
 124              		.section	.text.HardFault_Handler,"ax",%progbits
 125              		.align	1
 126              		.global	HardFault_Handler
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu softvfp
 132              	HardFault_Handler:
 133              	.LFB702:
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c **** /**
  81:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  82:Src/stm32f1xx_it.c ****   */
  83:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  84:Src/stm32f1xx_it.c **** {
 134              		.loc 1 84 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 1, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139 0000 80B4     		push	{r7}
 140              	.LCFI4:
 141              		.cfi_def_cfa_offset 4
 142              		.cfi_offset 7, -4
 143 0002 00AF     		add	r7, sp, #0
 144              	.LCFI5:
 145              		.cfi_def_cfa_register 7
 146              	.L3:
  85:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  86:Src/stm32f1xx_it.c **** 
  87:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  88:Src/stm32f1xx_it.c ****   while (1)
 147              		.loc 1 88 0 discriminator 1
 148 0004 FEE7     		b	.L3
 149              		.cfi_endproc
 150              	.LFE702:
 152              		.section	.text.MemManage_Handler,"ax",%progbits
 153              		.align	1
 154              		.global	MemManage_Handler
 155              		.syntax unified
 156              		.thumb
ARM GAS  /tmp/cchNdxuF.s 			page 5


 157              		.thumb_func
 158              		.fpu softvfp
 160              	MemManage_Handler:
 161              	.LFB703:
  89:Src/stm32f1xx_it.c ****   {
  90:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  91:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  92:Src/stm32f1xx_it.c ****   }
  93:Src/stm32f1xx_it.c **** }
  94:Src/stm32f1xx_it.c **** 
  95:Src/stm32f1xx_it.c **** /**
  96:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
  97:Src/stm32f1xx_it.c ****   */
  98:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  99:Src/stm32f1xx_it.c **** {
 162              		.loc 1 99 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167 0000 80B4     		push	{r7}
 168              	.LCFI6:
 169              		.cfi_def_cfa_offset 4
 170              		.cfi_offset 7, -4
 171 0002 00AF     		add	r7, sp, #0
 172              	.LCFI7:
 173              		.cfi_def_cfa_register 7
 174              	.L5:
 100:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 101:Src/stm32f1xx_it.c **** 
 102:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 103:Src/stm32f1xx_it.c ****   while (1)
 175              		.loc 1 103 0 discriminator 1
 176 0004 FEE7     		b	.L5
 177              		.cfi_endproc
 178              	.LFE703:
 180              		.section	.text.BusFault_Handler,"ax",%progbits
 181              		.align	1
 182              		.global	BusFault_Handler
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	BusFault_Handler:
 189              	.LFB704:
 104:Src/stm32f1xx_it.c ****   {
 105:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 106:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 107:Src/stm32f1xx_it.c ****   }
 108:Src/stm32f1xx_it.c **** }
 109:Src/stm32f1xx_it.c **** 
 110:Src/stm32f1xx_it.c **** /**
 111:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 112:Src/stm32f1xx_it.c ****   */
 113:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 114:Src/stm32f1xx_it.c **** {
 190              		.loc 1 114 0
ARM GAS  /tmp/cchNdxuF.s 			page 6


 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 195 0000 80B4     		push	{r7}
 196              	.LCFI8:
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 7, -4
 199 0002 00AF     		add	r7, sp, #0
 200              	.LCFI9:
 201              		.cfi_def_cfa_register 7
 202              	.L7:
 115:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 116:Src/stm32f1xx_it.c **** 
 117:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 118:Src/stm32f1xx_it.c ****   while (1)
 203              		.loc 1 118 0 discriminator 1
 204 0004 FEE7     		b	.L7
 205              		.cfi_endproc
 206              	.LFE704:
 208              		.section	.text.UsageFault_Handler,"ax",%progbits
 209              		.align	1
 210              		.global	UsageFault_Handler
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu softvfp
 216              	UsageFault_Handler:
 217              	.LFB705:
 119:Src/stm32f1xx_it.c ****   {
 120:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 121:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 122:Src/stm32f1xx_it.c ****   }
 123:Src/stm32f1xx_it.c **** }
 124:Src/stm32f1xx_it.c **** 
 125:Src/stm32f1xx_it.c **** /**
 126:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 127:Src/stm32f1xx_it.c ****   */
 128:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 129:Src/stm32f1xx_it.c **** {
 218              		.loc 1 129 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223 0000 80B4     		push	{r7}
 224              	.LCFI10:
 225              		.cfi_def_cfa_offset 4
 226              		.cfi_offset 7, -4
 227 0002 00AF     		add	r7, sp, #0
 228              	.LCFI11:
 229              		.cfi_def_cfa_register 7
 230              	.L9:
 130:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 131:Src/stm32f1xx_it.c **** 
 132:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 133:Src/stm32f1xx_it.c ****   while (1)
ARM GAS  /tmp/cchNdxuF.s 			page 7


 231              		.loc 1 133 0 discriminator 1
 232 0004 FEE7     		b	.L9
 233              		.cfi_endproc
 234              	.LFE705:
 236              		.section	.text.SVC_Handler,"ax",%progbits
 237              		.align	1
 238              		.global	SVC_Handler
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu softvfp
 244              	SVC_Handler:
 245              	.LFB706:
 134:Src/stm32f1xx_it.c ****   {
 135:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 137:Src/stm32f1xx_it.c ****   }
 138:Src/stm32f1xx_it.c **** }
 139:Src/stm32f1xx_it.c **** 
 140:Src/stm32f1xx_it.c **** /**
 141:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 142:Src/stm32f1xx_it.c ****   */
 143:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 144:Src/stm32f1xx_it.c **** {
 246              		.loc 1 144 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251 0000 80B4     		push	{r7}
 252              	.LCFI12:
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 0002 00AF     		add	r7, sp, #0
 256              	.LCFI13:
 257              		.cfi_def_cfa_register 7
 145:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 146:Src/stm32f1xx_it.c **** 
 147:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 151:Src/stm32f1xx_it.c **** }
 258              		.loc 1 151 0
 259 0004 00BF     		nop
 260 0006 BD46     		mov	sp, r7
 261              	.LCFI14:
 262              		.cfi_def_cfa_register 13
 263              		@ sp needed
 264 0008 80BC     		pop	{r7}
 265              	.LCFI15:
 266              		.cfi_restore 7
 267              		.cfi_def_cfa_offset 0
 268 000a 7047     		bx	lr
 269              		.cfi_endproc
 270              	.LFE706:
 272              		.section	.text.DebugMon_Handler,"ax",%progbits
ARM GAS  /tmp/cchNdxuF.s 			page 8


 273              		.align	1
 274              		.global	DebugMon_Handler
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu softvfp
 280              	DebugMon_Handler:
 281              	.LFB707:
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c **** /**
 154:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 155:Src/stm32f1xx_it.c ****   */
 156:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 157:Src/stm32f1xx_it.c **** {
 282              		.loc 1 157 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287 0000 80B4     		push	{r7}
 288              	.LCFI16:
 289              		.cfi_def_cfa_offset 4
 290              		.cfi_offset 7, -4
 291 0002 00AF     		add	r7, sp, #0
 292              	.LCFI17:
 293              		.cfi_def_cfa_register 7
 158:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 159:Src/stm32f1xx_it.c **** 
 160:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 164:Src/stm32f1xx_it.c **** }
 294              		.loc 1 164 0
 295 0004 00BF     		nop
 296 0006 BD46     		mov	sp, r7
 297              	.LCFI18:
 298              		.cfi_def_cfa_register 13
 299              		@ sp needed
 300 0008 80BC     		pop	{r7}
 301              	.LCFI19:
 302              		.cfi_restore 7
 303              		.cfi_def_cfa_offset 0
 304 000a 7047     		bx	lr
 305              		.cfi_endproc
 306              	.LFE707:
 308              		.section	.text.PendSV_Handler,"ax",%progbits
 309              		.align	1
 310              		.global	PendSV_Handler
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu softvfp
 316              	PendSV_Handler:
 317              	.LFB708:
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c **** /**
ARM GAS  /tmp/cchNdxuF.s 			page 9


 167:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 168:Src/stm32f1xx_it.c ****   */
 169:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 170:Src/stm32f1xx_it.c **** {
 318              		.loc 1 170 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323 0000 80B4     		push	{r7}
 324              	.LCFI20:
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 7, -4
 327 0002 00AF     		add	r7, sp, #0
 328              	.LCFI21:
 329              		.cfi_def_cfa_register 7
 171:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 172:Src/stm32f1xx_it.c **** 
 173:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 174:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 175:Src/stm32f1xx_it.c **** 
 176:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 177:Src/stm32f1xx_it.c **** }
 330              		.loc 1 177 0
 331 0004 00BF     		nop
 332 0006 BD46     		mov	sp, r7
 333              	.LCFI22:
 334              		.cfi_def_cfa_register 13
 335              		@ sp needed
 336 0008 80BC     		pop	{r7}
 337              	.LCFI23:
 338              		.cfi_restore 7
 339              		.cfi_def_cfa_offset 0
 340 000a 7047     		bx	lr
 341              		.cfi_endproc
 342              	.LFE708:
 344              		.section	.text.SysTick_Handler,"ax",%progbits
 345              		.align	1
 346              		.global	SysTick_Handler
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 350              		.fpu softvfp
 352              	SysTick_Handler:
 353              	.LFB709:
 178:Src/stm32f1xx_it.c **** 
 179:Src/stm32f1xx_it.c **** /**
 180:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 181:Src/stm32f1xx_it.c ****   */
 182:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 183:Src/stm32f1xx_it.c **** {
 354              		.loc 1 183 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 359 0000 80B4     		push	{r7}
ARM GAS  /tmp/cchNdxuF.s 			page 10


 360              	.LCFI24:
 361              		.cfi_def_cfa_offset 4
 362              		.cfi_offset 7, -4
 363 0002 00AF     		add	r7, sp, #0
 364              	.LCFI25:
 365              		.cfi_def_cfa_register 7
 184:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 185:Src/stm32f1xx_it.c **** 
 186:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 187:Src/stm32f1xx_it.c ****   
 188:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 189:Src/stm32f1xx_it.c **** 
 190:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 191:Src/stm32f1xx_it.c **** }
 366              		.loc 1 191 0
 367 0004 00BF     		nop
 368 0006 BD46     		mov	sp, r7
 369              	.LCFI26:
 370              		.cfi_def_cfa_register 13
 371              		@ sp needed
 372 0008 80BC     		pop	{r7}
 373              	.LCFI27:
 374              		.cfi_restore 7
 375              		.cfi_def_cfa_offset 0
 376 000a 7047     		bx	lr
 377              		.cfi_endproc
 378              	.LFE709:
 380              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 381              		.align	1
 382              		.global	TIM2_IRQHandler
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu softvfp
 388              	TIM2_IRQHandler:
 389              	.LFB710:
 192:Src/stm32f1xx_it.c **** 
 193:Src/stm32f1xx_it.c **** /******************************************************************************/
 194:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 195:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 196:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 197:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 198:Src/stm32f1xx_it.c **** /******************************************************************************/
 199:Src/stm32f1xx_it.c **** 
 200:Src/stm32f1xx_it.c **** /**
 201:Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 202:Src/stm32f1xx_it.c ****   */
 203:Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
 204:Src/stm32f1xx_it.c **** {
 390              		.loc 1 204 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 1, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 395 0000 80B4     		push	{r7}
 396              	.LCFI28:
 397              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cchNdxuF.s 			page 11


 398              		.cfi_offset 7, -4
 399 0002 00AF     		add	r7, sp, #0
 400              	.LCFI29:
 401              		.cfi_def_cfa_register 7
 205:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 206:Src/stm32f1xx_it.c **** 
 207:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 208:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 209:Src/stm32f1xx_it.c **** 
 210:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 211:Src/stm32f1xx_it.c **** }
 402              		.loc 1 211 0
 403 0004 00BF     		nop
 404 0006 BD46     		mov	sp, r7
 405              	.LCFI30:
 406              		.cfi_def_cfa_register 13
 407              		@ sp needed
 408 0008 80BC     		pop	{r7}
 409              	.LCFI31:
 410              		.cfi_restore 7
 411              		.cfi_def_cfa_offset 0
 412 000a 7047     		bx	lr
 413              		.cfi_endproc
 414              	.LFE710:
 416              		.section	.text.USART1_IRQHandler,"ax",%progbits
 417              		.align	1
 418              		.global	USART1_IRQHandler
 419              		.syntax unified
 420              		.thumb
 421              		.thumb_func
 422              		.fpu softvfp
 424              	USART1_IRQHandler:
 425              	.LFB711:
 212:Src/stm32f1xx_it.c **** 
 213:Src/stm32f1xx_it.c **** /**
 214:Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 215:Src/stm32f1xx_it.c ****   */
 216:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 217:Src/stm32f1xx_it.c **** {
 426              		.loc 1 217 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430              		@ link register save eliminated.
 431 0000 80B4     		push	{r7}
 432              	.LCFI32:
 433              		.cfi_def_cfa_offset 4
 434              		.cfi_offset 7, -4
 435 0002 00AF     		add	r7, sp, #0
 436              	.LCFI33:
 437              		.cfi_def_cfa_register 7
 218:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 219:Src/stm32f1xx_it.c **** 
 220:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 221:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 222:Src/stm32f1xx_it.c **** 
 223:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
ARM GAS  /tmp/cchNdxuF.s 			page 12


 224:Src/stm32f1xx_it.c **** }
 438              		.loc 1 224 0
 439 0004 00BF     		nop
 440 0006 BD46     		mov	sp, r7
 441              	.LCFI34:
 442              		.cfi_def_cfa_register 13
 443              		@ sp needed
 444 0008 80BC     		pop	{r7}
 445              	.LCFI35:
 446              		.cfi_restore 7
 447              		.cfi_def_cfa_offset 0
 448 000a 7047     		bx	lr
 449              		.cfi_endproc
 450              	.LFE711:
 452              		.text
 453              	.Letext0:
 454              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 455              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 456              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 457              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 458              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h"
 459              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
ARM GAS  /tmp/cchNdxuF.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/cchNdxuF.s:16     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/cchNdxuF.s:19     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
     /tmp/cchNdxuF.s:28     .rodata.OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/cchNdxuF.s:31     .rodata.OFFSET_TAB_CCMRx:0000000000000000 OFFSET_TAB_CCMRx
     /tmp/cchNdxuF.s:40     .rodata.SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/cchNdxuF.s:43     .rodata.SHIFT_TAB_OCxx:0000000000000000 SHIFT_TAB_OCxx
     /tmp/cchNdxuF.s:52     .rodata.SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/cchNdxuF.s:55     .rodata.SHIFT_TAB_ICxx:0000000000000000 SHIFT_TAB_ICxx
     /tmp/cchNdxuF.s:64     .rodata.SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/cchNdxuF.s:67     .rodata.SHIFT_TAB_CCxP:0000000000000000 SHIFT_TAB_CCxP
     /tmp/cchNdxuF.s:76     .rodata.SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/cchNdxuF.s:79     .rodata.SHIFT_TAB_OISx:0000000000000000 SHIFT_TAB_OISx
     /tmp/cchNdxuF.s:88     .text.NMI_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:95     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/cchNdxuF.s:125    .text.HardFault_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:132    .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cchNdxuF.s:153    .text.MemManage_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:160    .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/cchNdxuF.s:181    .text.BusFault_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:188    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/cchNdxuF.s:209    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:216    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/cchNdxuF.s:237    .text.SVC_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:244    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/cchNdxuF.s:273    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:280    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/cchNdxuF.s:309    .text.PendSV_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:316    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/cchNdxuF.s:345    .text.SysTick_Handler:0000000000000000 $t
     /tmp/cchNdxuF.s:352    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/cchNdxuF.s:381    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/cchNdxuF.s:388    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/cchNdxuF.s:417    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/cchNdxuF.s:424    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
                           .group:0000000000000000 wm4.0.3946371c97d0a222db2c40aaaa70ce2e
                           .group:0000000000000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stm32f1xx.h.57.c2a10934f4c6830aeb7e4997f02806f1
                           .group:0000000000000000 wm4.stm32f103xb.h.56.66305a77cea9d5300aac997a78930076
                           .group:0000000000000000 wm4.core_cm3.h.42.2a8e0c96b09547b9973a4a18db1ac16e
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.67d2dcde6a14ff518eedc1d545d89a76
                           .group:0000000000000000 wm4.core_cm3.h.175.a6c441adf1a05ce96eea3cf78e6687ab
                           .group:0000000000000000 wm4.stm32f103xb.h.619.22d758ea40bb8f555fe007e299ff5828
                           .group:0000000000000000 wm4.stm32f1xx.h.180.c0013e6ebd6ad07f67c298190b8eac92
                           .group:0000000000000000 wm4.stm32f1xx_ll_rcc.h.133.f2c6b39aafa6dc41b1f80066964a517a
                           .group:0000000000000000 wm4.stm32f1xx_ll_bus.h.55.b62a26ffaac5157df7e1c6646444baca
                           .group:0000000000000000 wm4.stm32f1xx_ll_system.h.50.25f6bc0dfea888a7947450c77fd3f3ce
                           .group:0000000000000000 wm4.stm32f1xx_ll_exti.h.38.b2302a3f1b3c0406d04c4166dc2ab6b9
                           .group:0000000000000000 wm4.stm32f1xx_ll_cortex.h.54.d72579fbac3fba8c27d23f5f86c5a2d0
                           .group:0000000000000000 wm4.stm32f1xx_ll_utils.h.50.defdd3826689e2648050ec6def2cb464
                           .group:0000000000000000 wm4.stm32f1xx_ll_pwr.h.38.f2a5845cec5a51652c5c1799688667a3
ARM GAS  /tmp/cchNdxuF.s 			page 14


                           .group:0000000000000000 wm4.stm32f1xx_ll_dma.h.38.c318779340499782ef5ff02b83153b4b
                           .group:0000000000000000 wm4.stm32f1xx_ll_tim.h.38.f5d216c51972265e657c63880bebcf3c
                           .group:0000000000000000 wm4.stm32f1xx_ll_usart.h.38.10e90e64d2ace6efadef6942de41f5f5
                           .group:0000000000000000 wm4.stm32f1xx_ll_gpio.h.38.4ef834ebcab1a56c81b925fcc4e4b857
                           .group:0000000000000000 wm4.main.h.78.8c514909862547cb0ec590b4e8cce29b

NO UNDEFINED SYMBOLS
